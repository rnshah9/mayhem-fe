use foo::bar as baz
use foo::food
use bing::bong::*
use test1::{test1_1, test1_2::{test_1_2_1::*}}

type MyType = String<42>

struct MyStruct {
    field1: foo::Bar
    field2: u256
    field3: address

    pub fn field2_squared(self) -> u256 {
        return self.field2 * self.field2
    }
}

struct EmptyType {}

contract Foo {
    field1: Map<u256, bool>
    field2: bool

    event EmptyEvent {}

    event MyEvent {
        idx field1: bool
        field2: String<42>
    }

    pub fn my_func() {
        std::solidity::bytes2::from_array([1, 2])
        if x {
        } else if y {
            2 + 1
            3 + 4
        } else {
            if z {} else { 1 }
        }
        unsafe {}
    }

    fn my_other_func() {}

    fn foo() {
        while x { y }
        while y {}
        for x in y {}
        for x in y { 5 }
    }
}

contract Bar {
    pub fn __init__() {}
}
