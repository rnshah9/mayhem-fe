contract Foo {
    pub fn add(val1: u8, val2: u8) -> u8 {
        return val1 + val2
    }

    pub fn subtract(val1: u8, val2: u8) -> u8 {
        return val1 - val2
    }

    pub fn multiply(val1: u8, val2: u8) -> u8 {
        return val1 * val2
    }

    pub fn divide(val1: u8, val2: u8) -> u8 {
        return val1 / val2
    }

    pub fn pow(val1: u8, val2: u8) -> u8 {
        return val1 ** val2
    }

    pub fn modulo(val1: u8, val2: u8) -> u8 {
        return val1 % val2
    }

    pub fn rightshift(val1: u8, val2: u8) -> u8 {
        return val1 >> val2
    }

    pub fn leftshift(val1: u8, val2: u8) -> u8 {
        return val1 << val2
    }

    pub fn invert(val1: u8) -> u8 {
        return ~val1
    }

    pub fn bit_and(val1: u8, val2: u8) -> u8 {
        return val1 & val2
    }

    pub fn bit_or(val1: u8, val2: u8) -> u8 {
        return val1 | val2
    }

    pub fn bit_xor(val1: u8, val2: u8) -> u8 {
        return val1 ^ val2
    }

    pub fn cast1(val1: u8) -> i8 {
        return i8(val1)
    }

    pub fn cast2(val1: u8) -> i16 {
        return i16(i8(val1))
    }

    pub fn cast3(val1: u8) -> i16 {
        return i16(u16(val1))
    }

    pub fn order_of_operation(val1: u8, val2: u8) -> u8 {
        return val1 - val2 * (val1 + val2 / 4 * val1 - val2 ** val1) + val1
    }

    pub fn sqrt(val: u256) -> u256 {
        let z: u256
        if val > 3 {
            z = val
            let x: u256 = val / 2 + 1
            while x < z {
                z = x
                x = (val / x + x) / 2
            }
        } else if val != 0 {
            z = 1
        }
        return z
    }
}
