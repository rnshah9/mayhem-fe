use std::context::Context

struct MyStruct {
    my_num: u256
    my_num2: u8
    my_bool: bool
    my_addr: address
    my_num3: i8
}

contract Foo {
    data: MyStruct
    items: Array<i8, 1>
    more_items: Array<u256, 100>
    some_string: String<100>

    pub fn set_data(self, val: MyStruct) {
        self.data = val
    }

    pub fn get_data(self) -> MyStruct {
        return self.data.to_mem()
    }

    pub fn set_string(self, val: String<100>) {
        self.some_string = val
    }

    pub fn get_string(self) -> String<100> {
        return self.some_string.to_mem()
    }

    pub fn set_item(self, index: u256, item: i8) {
        self.items[index] = item
    }

    pub fn get_items(self) -> Array<i8, 1> {
        return self.items.to_mem()
    }

    pub fn set_range(self, ctx: Context, from: u256, to: u256) {
        let index: u256 = from
        let counter: u256 = 0
        while index < to {
            self.more_items[index] = self.more_items[index] + ctx.block_number()
            index += 1
            counter += 1
            if counter > 20 {
                break
            }
        }
    }

    pub fn get_range(self) -> Array<u256, 100> {
        return self.more_items.to_mem()
    }
}
