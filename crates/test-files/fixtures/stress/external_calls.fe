use std::context::Context

struct SomeError {
    pub code: u256
}

contract Foo {
    my_tuple: (u256, address)
    my_string: String<100>

    pub fn get_my_string(self) -> String<100> {
        return self.my_string.to_mem()
    }

    pub fn set_my_string(self, some_string: String<100>) {
        self.my_string = some_string
    }

    pub fn get_my_tuple(self) -> (u256, address) {
        return self.my_tuple.to_mem()
    }

    pub fn set_my_tuple(self, some_tuple: (u256, address)) {
        self.my_tuple = some_tuple
    }

    pub fn set_my_string_and_tuple(self, some_string: String<100>, some_tuple: (u256, address)) {
        self.my_string = some_string
        self.my_tuple = some_tuple
    }

    pub fn get_string() -> String<10> {
        return String<10>("hi")
    }

    pub fn get_array() -> Array<u16, 4> {
        return [u16(1), u16(2), u16(3), u16(257)]
    }

    pub fn get_tuple() -> (u256, u256, bool) {
        return (42, 26, false)
    }

    pub fn do_revert() {
        revert
    }

    pub fn do_revert2() -> bool {
        revert
    }

    pub fn do_revert_with_data() {
        revert SomeError(code: 4711)
    }

    pub fn do_revert_with_data2() -> bool {
        revert SomeError(code: 4711)
    }
}

contract FooProxy {
    foo: Foo

    pub fn __init__(self, foo_addr: address) {
        self.foo = Foo(foo_addr)
    }

    pub fn call_set_my_string(self, some_string: String<100>) {
        self.foo.set_my_string(some_string)
    }

    pub fn call_get_my_string(self) -> String<100> {
        return self.foo.get_my_string()
    }

    pub fn call_set_my_tuple(self, some_tuple: (u256, address)) {
        self.foo.set_my_tuple(some_tuple)
    }

    pub fn call_get_my_tuple(self) -> (u256, address) {
        return self.foo.get_my_tuple()
    }

    pub fn call_set_my_string_and_tuple(self, some_string: String<100>, some_tuple: (u256, address)) {
        self.foo.set_my_string_and_tuple(some_string, some_tuple)
    }

    pub fn call_get_string(self) -> String<10> {
        return self.foo.get_string()
    }

    pub fn call_get_tuple(self) -> (u256, u256, bool) {
        return self.foo.get_tuple()
    }

    pub fn call_get_array(self) {
        let my_array: Array<u16, 4> = self.foo.get_array()
        assert my_array[0] == u16(1)
        assert my_array[1] == u16(2)
        assert my_array[2] == u16(3)
        assert my_array[3] == u16(257)
    }

    pub fn call_do_revert(self) {
        self.foo.do_revert()
    }

    pub fn call_do_revert2(self) {
        self.foo.do_revert2()
    }

    pub fn call_do_revert_with_data(self) {
        self.foo.do_revert_with_data()
    }

    pub fn call_do_revert_with_data2(self) {
        self.foo.do_revert_with_data2()
    }
}
