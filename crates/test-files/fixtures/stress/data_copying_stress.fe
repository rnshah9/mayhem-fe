use std::context::Context

contract Foo {
    my_string: String<42>
    my_other_string: String<42>
    my_u256: u256
    my_other_u256: u256
    my_nums: Array<u256, 5>
    my_addrs: Array<address, 3>

    event MyEvent {
        my_string: String<42>
        my_u256: u256
    }

    pub fn set_my_vals(self, my_string: String<42>, my_other_string: String<42>, my_u256: u256, my_other_u256: u256) {
        self.my_string = my_string
        self.my_other_string = my_other_string
        self.my_u256 = my_u256
        self.my_other_u256 = my_other_u256
    }

    pub fn set_to_my_other_vals(self) {
        self.my_string = self.my_other_string
        self.my_u256 = self.my_other_u256
    }

    pub fn multiple_references_shared_memory(my_array: Array<u256, 10>) {
        let my_2nd_array: Array<u256, 10> = my_array
        let my_3rd_array: Array<u256, 10> = my_2nd_array
        assert my_array[3] != 5
        my_array[3] = 5
        assert my_array[3] == 5
        assert my_2nd_array[3] == 5
        assert my_3rd_array[3] == 5
        my_3rd_array[3] = 50
        assert my_array[3] == 50
        assert my_2nd_array[3] == 50
        assert my_3rd_array[3] == 50
    }

    pub fn mutate_and_return(my_array: Array<u256, 10>) -> Array<u256, 10> {
        my_array[3] = 5
        return my_array
    }

    pub fn clone_and_return(my_array: Array<u256, 10>) -> Array<u256, 10> {
        return my_array.clone()
    }

    pub fn clone_mutate_and_return(my_array: Array<u256, 10>) -> Array<u256, 10> {
        my_array.clone()[3] = 5
        return my_array
    }

    pub fn assign_my_nums_and_return(self) -> Array<u256, 5> {
        let my_nums_mem: Array<u256, 5> = [0; 5]
        self.my_nums[0] = 42
        self.my_nums[1] = 26
        self.my_nums[2] = 0
        self.my_nums[3] = 1
        self.my_nums[4] = 255
        my_nums_mem = self.my_nums.to_mem()
        return my_nums_mem
    }

    pub fn emit_my_event(self, ctx: Context) {
        emit_my_event_internal(ctx, self.my_string.to_mem(), self.my_u256)
    }

    fn emit_my_event_internal(ctx: Context, _ my_string: String<42>, _ my_u256: u256) {
        emit MyEvent(ctx, my_string, my_u256)
    }

    pub fn set_my_addrs(self, my_addrs: Array<address, 3>) {
        self.my_addrs = my_addrs
    }

    pub fn get_my_second_addr(self) -> address {
        return self.my_addrs[1]
    }
}
