contract Foo {
    my_num: u256

    pub fn add(a: u256, b: u256) -> u256 {
        a += b
        return a
    }

    pub fn sub(a: u256, b: u256) -> u256 {
        a -= b
        return a
    }

    pub fn mul(a: u256, b: u256) -> u256 {
        a *= b
        return a
    }

    pub fn div(a: u256, b: u256) -> u256 {
        a /= b
        return a
    }

    pub fn mod(a: u256, b: u256) -> u256 {
        a %= b
        return a
    }

    pub fn pow(a: u256, b: u256) -> u256 {
        a **= b
        return a
    }

    pub fn lshift(a: u8, b: u8) -> u8 {
        a <<= b
        return a
    }

    pub fn rshift(a: u8, b: u8) -> u8 {
        a >>= b
        return a
    }

    pub fn bit_or(a: u8, b: u8) -> u8 {
        a |= b
        return a
    }

    pub fn bit_xor(a: u8, b: u8) -> u8 {
        a ^= b
        return a
    }

    pub fn bit_and(a: u8, b: u8) -> u8 {
        a &= b
        return a
    }

    pub fn add_from_sto(self, a: u256, b: u256) -> u256 {
        self.my_num = a
        self.my_num += b
        return self.my_num
    }

    pub fn add_from_mem(a: u256, b: u256) -> u256 {
        let my_array: Array<u256, 10>
        my_array[7] = a
        my_array[7] += b
        return my_array[7]
    }
}
