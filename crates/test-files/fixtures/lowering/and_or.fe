contract Foo {
    pub fn bar() -> bool {
        return baz(false or true)
    }

    pub fn nested() {
        if true {
            let a: bool = true
            let b: bool = false
            let x: bool = true
            let y: bool = false
            return double_baz(a and b, x or y)
        }
    }

    pub fn nested_ternary() -> bool {
        let a: bool = true
        let b: bool = false
        let x: bool = true
        let y: bool = false
        return baz(a and b) and (x and y)
    }

    pub fn in_dec() {
        let a: bool = true
        let b: bool = false
        let x: bool = true
        let y: bool = false
        let z: (bool, bool) = (a and b, x or y)
    }

    pub fn short_or(_ first: bool, _ second: bool, _ third: bool, _ fourth: bool) -> bool {
        return first or second or third or fourth
    }

    pub fn short_or2(_ first: bool, _ second: bool, _ third: bool, _ fourth: bool) -> bool {
        return first or second or (third or fourth)
    }

    pub fn short_or3(_ first: bool, _ second: bool, _ third: bool, _ fourth: bool) -> bool {
        return first or second or third or fourth
    }

    pub fn short_and(_ first: bool, _ second: bool, _ third: bool, _ fourth: bool) -> bool {
        return first and second and third and fourth
    }

    pub fn short_and2(_ first: bool, _ second: bool, _ third: bool, _ fourth: bool) -> bool {
        return first and second and (third and fourth)
    }

    pub fn short_and3(_ first: bool, _ second: bool, _ third: bool, _ fourth: bool) -> bool {
        return first and second and third and fourth
    }

    pub fn short_mixed(_ first: bool, _ second: bool, _ third: bool, _ fourth: bool) -> bool {
        return (first or second) and third or fourth
    }

    pub fn baz(_ val: bool) -> bool {
        return val
    }

    pub fn double_baz(_ val: bool, _ val2: bool) {}
}
