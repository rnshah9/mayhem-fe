trait Double {
  fn double(self) -> u256;
}

struct Bar {}

impl Double for Bar {
  fn double(self) -> u256 {
    return 2
  }
}

impl Double for u8 {
  fn double(self) -> u256 {
    return u256(self + self)
  }
}

impl Double for (u256, u256) {
  fn double(self) -> u256 {
    return (self.item0 + self.item1) * 2
  }
}

impl Double for Array<u256, 2> {
  fn double(self) -> u256 {
    return (self[0] + self[1]) * 2
  }
}

contract Example {
  my_array: Array<u256, 2>

  pub fn __init__(self) {
    self.my_array = [1, 0]
  }

  pub fn run_test(self) {
    assert Bar().double() == 2
    assert u8(1).double() == 2
    assert (0, 1).double() == 2
    assert [1, 0].double() == 2
    assert self.my_array.to_mem().double() == 2
  }
}
