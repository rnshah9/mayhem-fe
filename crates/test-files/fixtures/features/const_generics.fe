contract Foo {
    pub fn bar() {
        # const generics with literal.
        let array_lit: Array<i32, 8> = [i32(0); 8]
        let array_lit2: Array<i32, { 8 }> = [i32(0); 8]

        # const generics with ternary expression.
        let array_ternary: Array<i32, { 3 if false else 8 }> = [i32(0); { 3 if false else 8 }]

        # const generics with logical expression.
        let array_logical_or: Array<i32, { 8 if (true or false) else 0 }> = [i32(0); { 8 if (true or false) else 0 }]
        let array_logical_and: Array<i32, { 0 if (true and false) else 8 }> = [i32(0); { 0 if (true and false) else 8 }]

        # const generics with binary expression.
        let array_add: Array<i32, { 5 + 3 }> = [i32(42); 8]
        let array_sub: Array<i32, { 10 -  2 }> = [i32(26); 8]
        let array_mul: Array<i32, { 2 * 4 }> = [i32(0); 8]
        let array_div: Array<i32, { 16 / 2 }> = [i32(0); 8]
        let array_mod: Array<i32, { 26 % 9 }> = [i32(0); 8]
        let array_pow: Array<i32, { 2 ** 3 }> = [i32(0); 8]
        let array_shl: Array<i32, { 0b0010 << 2 }> = [i32(0); 8]
        let array_shr: Array<i32, { 0b100000 >> 2 }> = [i32(0); 8]
        let array_bitor: Array<i32, { 0b1000 |  0b0000 }> = [i32(0); 8]
        let array_xor: Array<i32, { 0b1111 ^ 0b0111 }> = [i32(0); 8]
        let array_bitand: Array<i32, { 0b1010 & 0b1101 }> = [i32(0); 8]

        # const generics with comparison expression.
        let array_eq: Array<i32, { 8 if 10 == 10 else 0 }> = [i32(0); 8]
        let array_ne: Array<i32, { 8 if 10 != 0 else 0 }> = [i32(0); 8]
        let array_lt1: Array<i32, { 8 if 0 < 10 else 0 }> = [i32(0); 8]
        let array_lt2: Array<i32, { 0 if 10 < 10 else 8 }> = [i32(0); 8]
        let array_lte: Array<i32, { 8 if 0 <= 10 else 0 }> = [i32(0); 8]
        let array_lte2: Array<i32, { 8 if 10 <= 10 else 0 }> = [i32(0); 8]
        let array_gt: Array<i32, { 8 if 10 > 0 else 0 }> = [i32(0); 8]
        let array_gt2: Array<i32, { 1 if 10 > 10 else 8 }> = [i32(0); 8]
        let array_gte: Array<i32, { 1 if 0 >= 10 else 8 }> = [i32(0); 8]
        let array_gte2: Array<i32, { 8 if 10 >= 10 else 0 }> = [i32(0); 8]

        # const generics with unary expression.
        let array_not: Array<i32, { 8 if not false else 0 }> = [i32(0); 8]

        # const generics with const variable.
        const DOUBLE_ARRAY_LENGTH: u64 = 16
        const TWO: u64 = 2

        let array_with_const: Array<i32, { DOUBLE_ARRAY_LENGTH / TWO }> = [i32(0); 8]
    }
}