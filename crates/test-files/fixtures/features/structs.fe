struct Point {
    pub x: u256
    pub y: u256
}

struct Bar {
    pub name: String<3>
    pub numbers: Array<u256, 2>
    pub point: Point
    pub something: (u256, bool)
}

struct Mixed {
    pub foo: u256
    bar: bool

    pub fn new(val: u256) -> Mixed {
        return Mixed(foo: val, bar: false)
    }
}

struct House {
    pub price: u256
    pub size: u256
    pub rooms: u8
    pub vacant: bool

    pub fn encode(self) -> Array<u8, 128> {
        return self.abi_encode()
    }

    pub fn hash(self) -> u256 {
        return keccak256(self.encode())
    }

    pub fn price_per_sqft(self) -> u256 {
        return self.price / self.size
    }

    pub fn expand(self) {
        self.rooms += 1
        self.size += 100
    }
}

contract Foo {
    my_house: House
    my_bar: Bar

    pub fn complex_struct_in_storage(self) -> String<3> {
        self.my_bar = Bar(name: "foo", numbers: [1, 2], point: Point(x: 100, y: 200), something: (1, true))
        assert self.my_bar.numbers[0] == 1
        assert self.my_bar.numbers[1] == 2
        assert self.my_bar.point.x == 100
        assert self.my_bar.point.y == 200
        assert self.my_bar.something.item0 == 1
        assert self.my_bar.something.item1
        self.my_bar.numbers[0] = 10
        self.my_bar.numbers[1] = 20
        assert self.my_bar.numbers[0] == 10
        assert self.my_bar.numbers[1] == 20
        self.my_bar.numbers = [1, 2]
        assert self.my_bar.numbers[0] == 1
        assert self.my_bar.numbers[1] == 2
        self.my_bar.point.x = 1000
        self.my_bar.point.y = 2000
        assert self.my_bar.point.x == 1000
        assert self.my_bar.point.y == 2000
        self.my_bar.point = Point(x: 100, y: 200)
        assert self.my_bar.point.x == 100
        assert self.my_bar.point.y == 200
        self.my_bar.something.item0 = 10
        self.my_bar.something.item1 = false
        assert self.my_bar.something.item0 == 10
        assert not self.my_bar.something.item1
        self.my_bar.something = (1, true)
        assert self.my_bar.something.item0 == 1
        assert self.my_bar.something.item1
        return self.my_bar.name.to_mem()
    }

    pub fn complex_struct_in_memory(self) -> String<3> {
        let val: Bar = Bar(name: "foo", numbers: [1, 2], point: Point(x: 100, y: 200), something: (1, true))
        assert val.numbers[0] == 1
        assert val.numbers[1] == 2
        assert val.point.x == 100
        assert val.point.y == 200
        assert val.something.item0 == 1
        assert val.something.item1
        val.numbers[0] = 10
        val.numbers[1] = 20
        assert val.numbers[0] == 10
        assert val.numbers[1] == 20
        val.numbers = [1, 2]
        assert val.numbers[0] == 1
        assert val.numbers[1] == 2
        val.point.x = 1000
        val.point.y = 2000
        assert val.point.x == 1000
        assert val.point.y == 2000
        val.point = Point(x: 100, y: 200)
        assert val.point.x == 100
        assert val.point.y == 200
        val.something.item0 = 10
        val.something.item1 = false
        assert val.something.item0 == 10
        assert not val.something.item1
        val.something = (1, true)
        assert val.something.item0 == 1
        assert val.something.item1
        return val.name
    }

    pub fn create_mixed(self) -> u256 {
        let mixed: Mixed = Mixed::new(val: 1)
        return mixed.foo
    }

    pub fn set_house(self, data: House) {
        self.my_house = data
    }

    pub fn get_house(self) -> House {
        return self.my_house.to_mem()
    }

    pub fn create_house(self) {
        self.my_house = House(price: 1, size: 2, rooms: u8(5), vacant: false)
        assert self.my_house.price == 1
        assert self.my_house.size == 2
        assert self.my_house.rooms == u8(5)
        assert self.my_house.vacant == false
        self.my_house.size = 50
        assert self.my_house.size == 50
        assert self.my_house.price == 1
        assert self.my_house.rooms == u8(5)
        assert self.my_house.vacant == false
        self.my_house.price = 1000
        assert self.my_house.size == 50
        assert self.my_house.price == 1000
        assert self.my_house.rooms == u8(5)
        assert self.my_house.vacant == false
        self.my_house.vacant = true
        assert self.my_house.size == 50
        assert self.my_house.price == 1000
        assert self.my_house.rooms == u8(5)
        assert self.my_house.vacant
        self.my_house.rooms = u8(100)
        assert self.my_house.size == 50
        assert self.my_house.price == 1000
        assert self.my_house.rooms == u8(100)
        assert self.my_house.vacant
    }

    pub fn bar() -> u256 {
        let building: House = House(price: 300, size: 500, rooms: u8(20), vacant: true)
        assert building.size == 500
        assert building.price == 300
        assert building.rooms == u8(20)
        assert building.vacant
        building.vacant = false
        building.price = 1
        building.size = 2
        building.rooms = u8(10)
        assert building.vacant == false
        assert building.price == 1
        assert building.size == 2
        assert building.rooms == u8(10)
        building.expand()
        assert building.size == 102
        assert building.rooms == 11
        return building.size
    }

    pub fn encode_house() -> Array<u8, 128> {
        let house: House = House(price: 300, size: 500, rooms: u8(20), vacant: true)
        return house.encode()
    }

    pub fn hashed_house() -> u256 {
        let house: House = House(price: 300, size: 500, rooms: u8(20), vacant: true)
        return house.hash()
    }
}
