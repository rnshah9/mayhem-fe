pub struct StaticInner {
    pub inner_x: i32
    pub inner_y: i32
}
    
pub struct StaticComplex {
    pub inner: StaticInner
    pub outer_x: i256
}
    
pub struct StringComplex {
    pub string: String<8>
    pub outer_x: i32
}
    
pub struct BytesComplex {
    pub bytes: Array<u8, 8>
    pub outer_x: i32
}

pub struct NestedDynamicComplex {
    pub bytes_complex: BytesComplex
    pub static_complex: StaticComplex
    pub string_complex: StringComplex
}


contract Foo {
    pub fn static_complex(self) -> StaticComplex {
        let inner: StaticInner = StaticInner(inner_x: 10, inner_y: 20)
        let complex: StaticComplex = StaticComplex(inner, outer_x: 30)
        return complex
    }
        

    pub fn string_complex(self) -> StringComplex {
        let complex: StringComplex = StringComplex(string: "Hello", outer_x: 30)
        return complex
    }

    pub fn bytes_complex(self) -> BytesComplex {
        let complex: BytesComplex = BytesComplex(bytes: [1, 2, 3, 4, 5, 6, 7, 8], outer_x: 30)
        return complex
    }

    pub fn nested_dynamic_complex(self) -> NestedDynamicComplex {
        let bytes_complex: BytesComplex = self.bytes_complex()
        let static_complex: StaticComplex = self.static_complex()
        let string_complex: StringComplex = self.string_complex()
        let complex: NestedDynamicComplex = NestedDynamicComplex(bytes_complex, static_complex, string_complex)
        return complex
    }
}