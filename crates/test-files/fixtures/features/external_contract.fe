use std::context::Context

contract Foo {
    event MyEvent {
        my_num: u256
        my_addrs: Array<address, 5>
        my_string: String<11>
    }

    pub fn emit_event(ctx: Context, my_num: u256, my_addrs: Array<address, 5>, my_string: String<11>) {
        emit MyEvent(ctx, my_num, my_addrs, my_string)
    }

    pub fn build_array(a: u256, b: u256) -> Array<u256, 3> {
        let my_array: Array<u256, 3> = [0; 3]
        my_array[0] = a
        my_array[1] = a * b
        my_array[2] = b
        return my_array
    }
}

contract FooProxy {
    pub fn call_emit_event(ctx: Context, foo_address: address, my_num: u256, my_addrs: Array<address, 5>, my_string: String<11>) {
        let foo: Foo = Foo(foo_address)
        foo.emit_event(ctx, my_num, my_addrs, my_string)
    }

    pub fn call_build_array(foo_address: address, a: u256, b: u256) -> Array<u256, 3> {
        let foo: Foo = Foo(foo_address)
        return foo.build_array(a, b)
    }
}
