struct Point {
    pub x: u64
    pub y: u64

    pub fn new(x: u64, y: u64) -> Point {
        return Point(x, y)
    }

    pub fn origin() -> Point {
        return Point(x: 0, y: 0)
    }

    pub fn x(self) -> u64 {
        return self.x
    }

    pub fn set_x(self, _ x: u64) -> u64 {
        let old: u64 = self.x
        self.x = x
        return old
    }

    pub fn reflect(self) {
        let x: u64 = self.x
        let y: u64 = self.y
        self.x = y
        self.y = x
    }

    pub fn translate(self, x: u64, y: u64) {
        self.x += x
        self.y += y
    }

    pub fn add(self, _ other: Point) -> Point {
        let x: u64 = self.x + other.x
        let y: u64 = self.y + other.y
        return Point(x, y)
    }
}

pub fn do_pointy_things() {
    let p1: Point = Point::origin()
    p1.translate(x: 5, y: 10)
    let p2: Point = Point(x: 1, y: 2)
    let p3: Point = p1.add(p2)
    assert p3.x == 6 and p3.y == 12
}

contract Foo {
    pub fn bar(x: u64, y: u64) -> u64 {
        do_pointy_things()
        let p: Point = Point::new(x, y)
        assert p.x == x and p.y == y
        p.set_x(100)
        p.reflect()
        assert p.x() == y and p.y == 100
        return p.y
    }
}
