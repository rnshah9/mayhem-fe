trait Double {
  fn double(self) -> u256;
}

impl Double for u8 {
  fn double(self) -> u256 {
    return u256(self + self)
  }
}

impl Double for u16 {
  fn double(self) -> u256 {
    return u256(self + self)
  }
}

impl Double for (u256, u256) {
  fn double(self) -> u256 {
    return u256(self.item0 + self.item0 + self.item1 + self.item1)
  }
}

struct Runner {
  pub fn run<T: Double>(self, _ val: T) -> u256 {
    return val.double()
  }
}


contract Example {
  pub fn run_test(self) {
    let runner: Runner = Runner();
    assert runner.run(u8(1)) == 2
    assert runner.run(u16(1000)) == 2000
    assert runner.run((1, 1)) == 4
  }
}
