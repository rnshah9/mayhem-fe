---
source: crates/parser/tests/cases/parse_ast.rs
expression: "ast_string(stringify!(fn_def_generic), try_parse_module,\n    \"fn foo<T, R: Event>(this: T, that: R, _ val: u64) -> bool { false }\")"

---
Node(
  kind: Module(
    body: [
      Function(Node(
        kind: Function(
          sig: Node(
            kind: FunctionSignature(
              pub_: None,
              unsafe_: None,
              name: Node(
                kind: "foo",
                span: Span(
                  start: 3,
                  end: 6,
                ),
              ),
              generic_params: Node(
                kind: [
                  Unbounded(Node(
                    kind: "T",
                    span: Span(
                      start: 7,
                      end: 8,
                    ),
                  )),
                  Bounded(
                    name: Node(
                      kind: "R",
                      span: Span(
                        start: 10,
                        end: 11,
                      ),
                    ),
                    bound: Node(
                      kind: Base(
                        base: "Event",
                      ),
                      span: Span(
                        start: 13,
                        end: 18,
                      ),
                    ),
                  ),
                ],
                span: Span(
                  start: 6,
                  end: 19,
                ),
              ),
              args: [
                Node(
                  kind: Regular(RegularFunctionArg(
                    label: None,
                    name: Node(
                      kind: "this",
                      span: Span(
                        start: 20,
                        end: 24,
                      ),
                    ),
                    typ: Node(
                      kind: Base(
                        base: "T",
                      ),
                      span: Span(
                        start: 26,
                        end: 27,
                      ),
                    ),
                  )),
                  span: Span(
                    start: 20,
                    end: 27,
                  ),
                ),
                Node(
                  kind: Regular(RegularFunctionArg(
                    label: None,
                    name: Node(
                      kind: "that",
                      span: Span(
                        start: 29,
                        end: 33,
                      ),
                    ),
                    typ: Node(
                      kind: Base(
                        base: "R",
                      ),
                      span: Span(
                        start: 35,
                        end: 36,
                      ),
                    ),
                  )),
                  span: Span(
                    start: 29,
                    end: 36,
                  ),
                ),
                Node(
                  kind: Regular(RegularFunctionArg(
                    label: Some(Node(
                      kind: "_",
                      span: Span(
                        start: 38,
                        end: 39,
                      ),
                    )),
                    name: Node(
                      kind: "val",
                      span: Span(
                        start: 40,
                        end: 43,
                      ),
                    ),
                    typ: Node(
                      kind: Base(
                        base: "u64",
                      ),
                      span: Span(
                        start: 45,
                        end: 48,
                      ),
                    ),
                  )),
                  span: Span(
                    start: 40,
                    end: 48,
                  ),
                ),
              ],
              return_type: Some(Node(
                kind: Base(
                  base: "bool",
                ),
                span: Span(
                  start: 53,
                  end: 57,
                ),
              )),
            ),
            span: Span(
              start: 0,
              end: 57,
            ),
          ),
          body: [
            Node(
              kind: Expr(
                value: Node(
                  kind: Bool(false),
                  span: Span(
                    start: 60,
                    end: 65,
                  ),
                ),
              ),
              span: Span(
                start: 60,
                end: 65,
              ),
            ),
          ],
        ),
        span: Span(
          start: 0,
          end: 67,
        ),
      )),
    ],
  ),
  span: Span(
    start: 0,
    end: 67,
  ),
)
