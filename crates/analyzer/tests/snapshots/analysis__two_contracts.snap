---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ two_contracts.fe:4:5
  │
4 │     other: Bar
  │     ^^^^^^^^^^ Bar

note: 
   ┌─ two_contracts.fe:10:5
   │  
10 │ ╭     pub fn foo(self, ctx: Context) -> u256 {
11 │ │         self.other.set_foo_addr(ctx.self_address())
12 │ │         return self.other.answer()
13 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }] -> u256

note: 
   ┌─ two_contracts.fe:11:9
   │
11 │         self.other.set_foo_addr(ctx.self_address())
   │         ^^^^ Foo: Value

note: 
   ┌─ two_contracts.fe:11:9
   │
11 │         self.other.set_foo_addr(ctx.self_address())
   │         ^^^^^^^^^^              ^^^ Context: Memory
   │         │                        
   │         Bar: Storage { nonce: Some(0) } => Value

note: 
   ┌─ two_contracts.fe:11:33
   │
11 │         self.other.set_foo_addr(ctx.self_address())
   │                                 ^^^^^^^^^^^^^^^^^^ address: Value

note: 
   ┌─ two_contracts.fe:11:9
   │
11 │         self.other.set_foo_addr(ctx.self_address())
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
12 │         return self.other.answer()
   │                ^^^^ Foo: Value

note: 
   ┌─ two_contracts.fe:12:16
   │
12 │         return self.other.answer()
   │                ^^^^^^^^^^ Bar: Storage { nonce: Some(0) } => Value

note: 
   ┌─ two_contracts.fe:12:16
   │
12 │         return self.other.answer()
   │                ^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
   ┌─ two_contracts.fe:15:5
   │  
15 │ ╭     pub fn add(_ x: u256, _ y: u256) -> u256 {
16 │ │         return x + y
17 │ │     }
   │ ╰─────^ self: None, params: [{ label: Some("_"), name: x, typ: u256 }, { label: Some("_"), name: y, typ: u256 }] -> u256

note: 
   ┌─ two_contracts.fe:16:16
   │
16 │         return x + y
   │                ^   ^ u256: Value
   │                │    
   │                u256: Value

note: 
   ┌─ two_contracts.fe:16:16
   │
16 │         return x + y
   │                ^^^^^ u256: Value

note: 
   ┌─ two_contracts.fe:21:5
   │
21 │     other: Foo
   │     ^^^^^^^^^^ Foo

note: 
   ┌─ two_contracts.fe:23:5
   │  
23 │ ╭     pub fn set_foo_addr(self, _ addr: address) {
24 │ │         self.other = Foo(addr)
25 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: Some("_"), name: addr, typ: address }] -> ()

note: 
   ┌─ two_contracts.fe:24:9
   │
24 │         self.other = Foo(addr)
   │         ^^^^ Bar: Value

note: 
   ┌─ two_contracts.fe:24:9
   │
24 │         self.other = Foo(addr)
   │         ^^^^^^^^^^       ^^^^ address: Value
   │         │                 
   │         Foo: Storage { nonce: Some(0) }

note: 
   ┌─ two_contracts.fe:24:22
   │
24 │         self.other = Foo(addr)
   │                      ^^^^^^^^^ Foo: Value

note: 
   ┌─ two_contracts.fe:27:5
   │  
27 │ ╭     pub fn answer(self) -> u256 {
28 │ │         return self.other.add(20, 22)
29 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> u256

note: 
   ┌─ two_contracts.fe:28:16
   │
28 │         return self.other.add(20, 22)
   │                ^^^^ Bar: Value

note: 
   ┌─ two_contracts.fe:28:16
   │
28 │         return self.other.add(20, 22)
   │                ^^^^^^^^^^     ^^  ^^ u256: Value
   │                │              │    
   │                │              u256: Value
   │                Foo: Storage { nonce: Some(0) } => Value

note: 
   ┌─ two_contracts.fe:28:16
   │
28 │         return self.other.add(20, 22)
   │                ^^^^^^^^^^^^^^^^^^^^^^ u256: Value


