---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ structs.fe:2:5
  │
2 │     pub x: u256
  │     ^^^^^^^^^^^ u256
3 │     pub y: u256
  │     ^^^^^^^^^^^ u256

note: 
   ┌─ structs.fe:7:5
   │
 7 │     pub name: String<3>
   │     ^^^^^^^^^^^^^^^^^^^ String<3>
 8 │     pub numbers: Array<u256, 2>
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Array<u256, 2>
 9 │     pub point: Point
   │     ^^^^^^^^^^^^^^^^ Point
10 │     pub something: (u256, bool)
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, bool)

note: 
   ┌─ structs.fe:14:5
   │
14 │     pub foo: u256
   │     ^^^^^^^^^^^^^ u256
15 │     bar: bool
   │     ^^^^^^^^^ bool

note: 
   ┌─ structs.fe:17:5
   │  
17 │ ╭     pub fn new(val: u256) -> Mixed {
18 │ │         return Mixed(foo: val, bar: false)
19 │ │     }
   │ ╰─────^ self: None, params: [{ label: None, name: val, typ: u256 }] -> Mixed

note: 
   ┌─ structs.fe:18:27
   │
18 │         return Mixed(foo: val, bar: false)
   │                           ^^^       ^^^^^ bool: Value
   │                           │          
   │                           u256: Value

note: 
   ┌─ structs.fe:18:16
   │
18 │         return Mixed(foo: val, bar: false)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ Mixed: Memory

note: 
   ┌─ structs.fe:23:5
   │
23 │     pub price: u256
   │     ^^^^^^^^^^^^^^^ u256
24 │     pub size: u256
   │     ^^^^^^^^^^^^^^ u256
25 │     pub rooms: u8
   │     ^^^^^^^^^^^^^ u8
26 │     pub vacant: bool
   │     ^^^^^^^^^^^^^^^^ bool

note: 
   ┌─ structs.fe:28:5
   │  
28 │ ╭     pub fn encode(self) -> Array<u8, 128> {
29 │ │         return self.abi_encode()
30 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> Array<u8, 128>

note: 
   ┌─ structs.fe:29:16
   │
29 │         return self.abi_encode()
   │                ^^^^ House: Memory

note: 
   ┌─ structs.fe:29:16
   │
29 │         return self.abi_encode()
   │                ^^^^^^^^^^^^^^^^^ Array<u8, 128>: Memory

note: 
   ┌─ structs.fe:32:5
   │  
32 │ ╭     pub fn hash(self) -> u256 {
33 │ │         return keccak256(self.encode())
34 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> u256

note: 
   ┌─ structs.fe:33:26
   │
33 │         return keccak256(self.encode())
   │                          ^^^^ House: Memory

note: 
   ┌─ structs.fe:33:26
   │
33 │         return keccak256(self.encode())
   │                          ^^^^^^^^^^^^^ Array<u8, 128>: Memory

note: 
   ┌─ structs.fe:33:16
   │
33 │         return keccak256(self.encode())
   │                ^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
   ┌─ structs.fe:36:5
   │  
36 │ ╭     pub fn price_per_sqft(self) -> u256 {
37 │ │         return self.price / self.size
38 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> u256

note: 
   ┌─ structs.fe:37:16
   │
37 │         return self.price / self.size
   │                ^^^^ House: Memory

note: 
   ┌─ structs.fe:37:16
   │
37 │         return self.price / self.size
   │                ^^^^^^^^^^   ^^^^ House: Memory
   │                │             
   │                u256: Memory => Value

note: 
   ┌─ structs.fe:37:29
   │
37 │         return self.price / self.size
   │                             ^^^^^^^^^ u256: Memory => Value

note: 
   ┌─ structs.fe:37:16
   │
37 │         return self.price / self.size
   │                ^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
   ┌─ structs.fe:40:5
   │  
40 │ ╭     pub fn expand(self) {
41 │ │         self.rooms += 1
42 │ │         self.size += 100
43 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> ()

note: 
   ┌─ structs.fe:41:9
   │
41 │         self.rooms += 1
   │         ^^^^ House: Memory

note: 
   ┌─ structs.fe:41:9
   │
41 │         self.rooms += 1
   │         ^^^^^^^^^^    ^ u8: Value
   │         │              
   │         u8: Memory
42 │         self.size += 100
   │         ^^^^ House: Memory

note: 
   ┌─ structs.fe:42:9
   │
42 │         self.size += 100
   │         ^^^^^^^^^    ^^^ u256: Value
   │         │             
   │         u256: Memory

note: 
   ┌─ structs.fe:47:5
   │
47 │     my_house: House
   │     ^^^^^^^^^^^^^^^ House
48 │     my_bar: Bar
   │     ^^^^^^^^^^^ Bar

note: 
   ┌─ structs.fe:50:5
   │  
50 │ ╭     pub fn complex_struct_in_storage(self) -> String<3> {
51 │ │         self.my_bar = Bar(name: "foo", numbers: [1, 2], point: Point(x: 100, y: 200), something: (1, true))
52 │ │         assert self.my_bar.numbers[0] == 1
53 │ │         assert self.my_bar.numbers[1] == 2
   · │
79 │ │         return self.my_bar.name.to_mem()
80 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> String<3>

note: 
   ┌─ structs.fe:51:9
   │
51 │         self.my_bar = Bar(name: "foo", numbers: [1, 2], point: Point(x: 100, y: 200), something: (1, true))
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:51:9
   │
51 │         self.my_bar = Bar(name: "foo", numbers: [1, 2], point: Point(x: 100, y: 200), something: (1, true))
   │         ^^^^^^^^^^^             ^^^^^            ^  ^ u256: Value
   │         │                       │                │   
   │         │                       │                u256: Value
   │         │                       String<3>: Memory
   │         Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:51:49
   │
51 │         self.my_bar = Bar(name: "foo", numbers: [1, 2], point: Point(x: 100, y: 200), something: (1, true))
   │                                                 ^^^^^^                  ^^^     ^^^ u256: Value
   │                                                 │                       │        
   │                                                 │                       u256: Value
   │                                                 Array<u256, 2>: Memory

note: 
   ┌─ structs.fe:51:64
   │
51 │         self.my_bar = Bar(name: "foo", numbers: [1, 2], point: Point(x: 100, y: 200), something: (1, true))
   │                                                                ^^^^^^^^^^^^^^^^^^^^^              ^  ^^^^ bool: Value
   │                                                                │                                  │   
   │                                                                │                                  u256: Value
   │                                                                Point: Memory

note: 
   ┌─ structs.fe:51:98
   │
51 │         self.my_bar = Bar(name: "foo", numbers: [1, 2], point: Point(x: 100, y: 200), something: (1, true))
   │                                                                                                  ^^^^^^^^^ (u256, bool): Memory

note: 
   ┌─ structs.fe:51:23
   │
51 │         self.my_bar = Bar(name: "foo", numbers: [1, 2], point: Point(x: 100, y: 200), something: (1, true))
   │                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Bar: Memory
52 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:52:16
   │
52 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:52:16
   │
52 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^^^^^^^^^^^^^^^^ ^ u256: Value
   │                │                    
   │                Array<u256, 2>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:52:16
   │
52 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^    ^ u256: Value
   │                │                          
   │                u256: Storage { nonce: None } => Value

note: 
   ┌─ structs.fe:52:16
   │
52 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
53 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:53:16
   │
53 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:53:16
   │
53 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^^^^^^^^^^^^^^^^ ^ u256: Value
   │                │                    
   │                Array<u256, 2>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:53:16
   │
53 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^^^^^^^^^^^^^^^^^^^    ^ u256: Value
   │                │                          
   │                u256: Storage { nonce: None } => Value

note: 
   ┌─ structs.fe:53:16
   │
53 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
54 │         assert self.my_bar.point.x == 100
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:54:16
   │
54 │         assert self.my_bar.point.x == 100
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:54:16
   │
54 │         assert self.my_bar.point.x == 100
   │                ^^^^^^^^^^^^^^^^^ Point: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:54:16
   │
54 │         assert self.my_bar.point.x == 100
   │                ^^^^^^^^^^^^^^^^^^^    ^^^ u256: Value
   │                │                       
   │                u256: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:54:16
   │
54 │         assert self.my_bar.point.x == 100
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
55 │         assert self.my_bar.point.y == 200
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:55:16
   │
55 │         assert self.my_bar.point.y == 200
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:55:16
   │
55 │         assert self.my_bar.point.y == 200
   │                ^^^^^^^^^^^^^^^^^ Point: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:55:16
   │
55 │         assert self.my_bar.point.y == 200
   │                ^^^^^^^^^^^^^^^^^^^    ^^^ u256: Value
   │                │                       
   │                u256: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:55:16
   │
55 │         assert self.my_bar.point.y == 200
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
56 │         assert self.my_bar.something.item0 == 1
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:56:16
   │
56 │         assert self.my_bar.something.item0 == 1
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:56:16
   │
56 │         assert self.my_bar.something.item0 == 1
   │                ^^^^^^^^^^^^^^^^^^^^^ (u256, bool): Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:56:16
   │
56 │         assert self.my_bar.something.item0 == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^ u256: Value
   │                │                               
   │                u256: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:56:16
   │
56 │         assert self.my_bar.something.item0 == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
57 │         assert self.my_bar.something.item1
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:57:16
   │
57 │         assert self.my_bar.something.item1
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:57:16
   │
57 │         assert self.my_bar.something.item1
   │                ^^^^^^^^^^^^^^^^^^^^^ (u256, bool): Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:57:16
   │
57 │         assert self.my_bar.something.item1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Storage { nonce: Some(1) } => Value
58 │         self.my_bar.numbers[0] = 10
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:58:9
   │
58 │         self.my_bar.numbers[0] = 10
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:58:9
   │
58 │         self.my_bar.numbers[0] = 10
   │         ^^^^^^^^^^^^^^^^^^^ ^ u256: Value
   │         │                    
   │         Array<u256, 2>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:58:9
   │
58 │         self.my_bar.numbers[0] = 10
   │         ^^^^^^^^^^^^^^^^^^^^^^   ^^ u256: Value
   │         │                         
   │         u256: Storage { nonce: None }
59 │         self.my_bar.numbers[1] = 20
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:59:9
   │
59 │         self.my_bar.numbers[1] = 20
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:59:9
   │
59 │         self.my_bar.numbers[1] = 20
   │         ^^^^^^^^^^^^^^^^^^^ ^ u256: Value
   │         │                    
   │         Array<u256, 2>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:59:9
   │
59 │         self.my_bar.numbers[1] = 20
   │         ^^^^^^^^^^^^^^^^^^^^^^   ^^ u256: Value
   │         │                         
   │         u256: Storage { nonce: None }
60 │         assert self.my_bar.numbers[0] == 10
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:60:16
   │
60 │         assert self.my_bar.numbers[0] == 10
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:60:16
   │
60 │         assert self.my_bar.numbers[0] == 10
   │                ^^^^^^^^^^^^^^^^^^^ ^ u256: Value
   │                │                    
   │                Array<u256, 2>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:60:16
   │
60 │         assert self.my_bar.numbers[0] == 10
   │                ^^^^^^^^^^^^^^^^^^^^^^    ^^ u256: Value
   │                │                          
   │                u256: Storage { nonce: None } => Value

note: 
   ┌─ structs.fe:60:16
   │
60 │         assert self.my_bar.numbers[0] == 10
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
61 │         assert self.my_bar.numbers[1] == 20
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:61:16
   │
61 │         assert self.my_bar.numbers[1] == 20
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:61:16
   │
61 │         assert self.my_bar.numbers[1] == 20
   │                ^^^^^^^^^^^^^^^^^^^ ^ u256: Value
   │                │                    
   │                Array<u256, 2>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:61:16
   │
61 │         assert self.my_bar.numbers[1] == 20
   │                ^^^^^^^^^^^^^^^^^^^^^^    ^^ u256: Value
   │                │                          
   │                u256: Storage { nonce: None } => Value

note: 
   ┌─ structs.fe:61:16
   │
61 │         assert self.my_bar.numbers[1] == 20
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
62 │         self.my_bar.numbers = [1, 2]
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:62:9
   │
62 │         self.my_bar.numbers = [1, 2]
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:62:9
   │
62 │         self.my_bar.numbers = [1, 2]
   │         ^^^^^^^^^^^^^^^^^^^    ^  ^ u256: Value
   │         │                      │   
   │         │                      u256: Value
   │         Array<u256, 2>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:62:31
   │
62 │         self.my_bar.numbers = [1, 2]
   │                               ^^^^^^ Array<u256, 2>: Memory
63 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:63:16
   │
63 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:63:16
   │
63 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^^^^^^^^^^^^^^^^ ^ u256: Value
   │                │                    
   │                Array<u256, 2>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:63:16
   │
63 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^    ^ u256: Value
   │                │                          
   │                u256: Storage { nonce: None } => Value

note: 
   ┌─ structs.fe:63:16
   │
63 │         assert self.my_bar.numbers[0] == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
64 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:64:16
   │
64 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:64:16
   │
64 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^^^^^^^^^^^^^^^^ ^ u256: Value
   │                │                    
   │                Array<u256, 2>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:64:16
   │
64 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^^^^^^^^^^^^^^^^^^^    ^ u256: Value
   │                │                          
   │                u256: Storage { nonce: None } => Value

note: 
   ┌─ structs.fe:64:16
   │
64 │         assert self.my_bar.numbers[1] == 2
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
65 │         self.my_bar.point.x = 1000
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:65:9
   │
65 │         self.my_bar.point.x = 1000
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:65:9
   │
65 │         self.my_bar.point.x = 1000
   │         ^^^^^^^^^^^^^^^^^ Point: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:65:9
   │
65 │         self.my_bar.point.x = 1000
   │         ^^^^^^^^^^^^^^^^^^^   ^^^^ u256: Value
   │         │                      
   │         u256: Storage { nonce: Some(1) }
66 │         self.my_bar.point.y = 2000
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:66:9
   │
66 │         self.my_bar.point.y = 2000
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:66:9
   │
66 │         self.my_bar.point.y = 2000
   │         ^^^^^^^^^^^^^^^^^ Point: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:66:9
   │
66 │         self.my_bar.point.y = 2000
   │         ^^^^^^^^^^^^^^^^^^^   ^^^^ u256: Value
   │         │                      
   │         u256: Storage { nonce: Some(1) }
67 │         assert self.my_bar.point.x == 1000
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:67:16
   │
67 │         assert self.my_bar.point.x == 1000
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:67:16
   │
67 │         assert self.my_bar.point.x == 1000
   │                ^^^^^^^^^^^^^^^^^ Point: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:67:16
   │
67 │         assert self.my_bar.point.x == 1000
   │                ^^^^^^^^^^^^^^^^^^^    ^^^^ u256: Value
   │                │                       
   │                u256: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:67:16
   │
67 │         assert self.my_bar.point.x == 1000
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
68 │         assert self.my_bar.point.y == 2000
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:68:16
   │
68 │         assert self.my_bar.point.y == 2000
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:68:16
   │
68 │         assert self.my_bar.point.y == 2000
   │                ^^^^^^^^^^^^^^^^^ Point: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:68:16
   │
68 │         assert self.my_bar.point.y == 2000
   │                ^^^^^^^^^^^^^^^^^^^    ^^^^ u256: Value
   │                │                       
   │                u256: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:68:16
   │
68 │         assert self.my_bar.point.y == 2000
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
69 │         self.my_bar.point = Point(x: 100, y: 200)
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:69:9
   │
69 │         self.my_bar.point = Point(x: 100, y: 200)
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:69:9
   │
69 │         self.my_bar.point = Point(x: 100, y: 200)
   │         ^^^^^^^^^^^^^^^^^            ^^^     ^^^ u256: Value
   │         │                            │        
   │         │                            u256: Value
   │         Point: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:69:29
   │
69 │         self.my_bar.point = Point(x: 100, y: 200)
   │                             ^^^^^^^^^^^^^^^^^^^^^ Point: Memory
70 │         assert self.my_bar.point.x == 100
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:70:16
   │
70 │         assert self.my_bar.point.x == 100
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:70:16
   │
70 │         assert self.my_bar.point.x == 100
   │                ^^^^^^^^^^^^^^^^^ Point: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:70:16
   │
70 │         assert self.my_bar.point.x == 100
   │                ^^^^^^^^^^^^^^^^^^^    ^^^ u256: Value
   │                │                       
   │                u256: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:70:16
   │
70 │         assert self.my_bar.point.x == 100
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
71 │         assert self.my_bar.point.y == 200
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:71:16
   │
71 │         assert self.my_bar.point.y == 200
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:71:16
   │
71 │         assert self.my_bar.point.y == 200
   │                ^^^^^^^^^^^^^^^^^ Point: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:71:16
   │
71 │         assert self.my_bar.point.y == 200
   │                ^^^^^^^^^^^^^^^^^^^    ^^^ u256: Value
   │                │                       
   │                u256: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:71:16
   │
71 │         assert self.my_bar.point.y == 200
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
72 │         self.my_bar.something.item0 = 10
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:72:9
   │
72 │         self.my_bar.something.item0 = 10
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:72:9
   │
72 │         self.my_bar.something.item0 = 10
   │         ^^^^^^^^^^^^^^^^^^^^^ (u256, bool): Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:72:9
   │
72 │         self.my_bar.something.item0 = 10
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^ u256: Value
   │         │                              
   │         u256: Storage { nonce: Some(1) }
73 │         self.my_bar.something.item1 = false
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:73:9
   │
73 │         self.my_bar.something.item1 = false
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:73:9
   │
73 │         self.my_bar.something.item1 = false
   │         ^^^^^^^^^^^^^^^^^^^^^ (u256, bool): Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:73:9
   │
73 │         self.my_bar.something.item1 = false
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^   ^^^^^ bool: Value
   │         │                              
   │         bool: Storage { nonce: Some(1) }
74 │         assert self.my_bar.something.item0 == 10
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:74:16
   │
74 │         assert self.my_bar.something.item0 == 10
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:74:16
   │
74 │         assert self.my_bar.something.item0 == 10
   │                ^^^^^^^^^^^^^^^^^^^^^ (u256, bool): Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:74:16
   │
74 │         assert self.my_bar.something.item0 == 10
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^^ u256: Value
   │                │                               
   │                u256: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:74:16
   │
74 │         assert self.my_bar.something.item0 == 10
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
75 │         assert not self.my_bar.something.item1
   │                    ^^^^ Foo: Value

note: 
   ┌─ structs.fe:75:20
   │
75 │         assert not self.my_bar.something.item1
   │                    ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:75:20
   │
75 │         assert not self.my_bar.something.item1
   │                    ^^^^^^^^^^^^^^^^^^^^^ (u256, bool): Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:75:20
   │
75 │         assert not self.my_bar.something.item1
   │                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:75:16
   │
75 │         assert not self.my_bar.something.item1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
76 │         self.my_bar.something = (1, true)
   │         ^^^^ Foo: Value

note: 
   ┌─ structs.fe:76:9
   │
76 │         self.my_bar.something = (1, true)
   │         ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:76:9
   │
76 │         self.my_bar.something = (1, true)
   │         ^^^^^^^^^^^^^^^^^^^^^    ^  ^^^^ bool: Value
   │         │                        │   
   │         │                        u256: Value
   │         (u256, bool): Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:76:33
   │
76 │         self.my_bar.something = (1, true)
   │                                 ^^^^^^^^^ (u256, bool): Memory
77 │         assert self.my_bar.something.item0 == 1
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:77:16
   │
77 │         assert self.my_bar.something.item0 == 1
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:77:16
   │
77 │         assert self.my_bar.something.item0 == 1
   │                ^^^^^^^^^^^^^^^^^^^^^ (u256, bool): Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:77:16
   │
77 │         assert self.my_bar.something.item0 == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^    ^ u256: Value
   │                │                               
   │                u256: Storage { nonce: Some(1) } => Value

note: 
   ┌─ structs.fe:77:16
   │
77 │         assert self.my_bar.something.item0 == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
78 │         assert self.my_bar.something.item1
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:78:16
   │
78 │         assert self.my_bar.something.item1
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:78:16
   │
78 │         assert self.my_bar.something.item1
   │                ^^^^^^^^^^^^^^^^^^^^^ (u256, bool): Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:78:16
   │
78 │         assert self.my_bar.something.item1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Storage { nonce: Some(1) } => Value
79 │         return self.my_bar.name.to_mem()
   │                ^^^^ Foo: Value

note: 
   ┌─ structs.fe:79:16
   │
79 │         return self.my_bar.name.to_mem()
   │                ^^^^^^^^^^^ Bar: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:79:16
   │
79 │         return self.my_bar.name.to_mem()
   │                ^^^^^^^^^^^^^^^^ String<3>: Storage { nonce: Some(1) }

note: 
   ┌─ structs.fe:79:16
   │
79 │         return self.my_bar.name.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^ String<3>: Storage { nonce: Some(1) } => Memory

note: 
    ┌─ structs.fe:82:5
    │  
 82 │ ╭     pub fn complex_struct_in_memory(self) -> String<3> {
 83 │ │         let val: Bar = Bar(name: "foo", numbers: [1, 2], point: Point(x: 100, y: 200), something: (1, true))
 84 │ │         assert val.numbers[0] == 1
 85 │ │         assert val.numbers[1] == 2
    · │
111 │ │         return val.name
112 │ │     }
    │ ╰─────^ self: Some(Mutable), params: [] -> String<3>

note: 
   ┌─ structs.fe:83:13
   │
83 │         let val: Bar = Bar(name: "foo", numbers: [1, 2], point: Point(x: 100, y: 200), something: (1, true))
   │             ^^^ Bar

note: 
   ┌─ structs.fe:83:34
   │
83 │         let val: Bar = Bar(name: "foo", numbers: [1, 2], point: Point(x: 100, y: 200), something: (1, true))
   │                                  ^^^^^            ^  ^ u256: Value
   │                                  │                │   
   │                                  │                u256: Value
   │                                  String<3>: Memory

note: 
   ┌─ structs.fe:83:50
   │
83 │         let val: Bar = Bar(name: "foo", numbers: [1, 2], point: Point(x: 100, y: 200), something: (1, true))
   │                                                  ^^^^^^                  ^^^     ^^^ u256: Value
   │                                                  │                       │        
   │                                                  │                       u256: Value
   │                                                  Array<u256, 2>: Memory

note: 
   ┌─ structs.fe:83:65
   │
83 │         let val: Bar = Bar(name: "foo", numbers: [1, 2], point: Point(x: 100, y: 200), something: (1, true))
   │                                                                 ^^^^^^^^^^^^^^^^^^^^^              ^  ^^^^ bool: Value
   │                                                                 │                                  │   
   │                                                                 │                                  u256: Value
   │                                                                 Point: Memory

note: 
   ┌─ structs.fe:83:99
   │
83 │         let val: Bar = Bar(name: "foo", numbers: [1, 2], point: Point(x: 100, y: 200), something: (1, true))
   │                                                                                                   ^^^^^^^^^ (u256, bool): Memory

note: 
   ┌─ structs.fe:83:24
   │
83 │         let val: Bar = Bar(name: "foo", numbers: [1, 2], point: Point(x: 100, y: 200), something: (1, true))
   │                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Bar: Memory
84 │         assert val.numbers[0] == 1
   │                ^^^ Bar: Memory

note: 
   ┌─ structs.fe:84:16
   │
84 │         assert val.numbers[0] == 1
   │                ^^^^^^^^^^^ ^ u256: Value
   │                │            
   │                Array<u256, 2>: Memory

note: 
   ┌─ structs.fe:84:16
   │
84 │         assert val.numbers[0] == 1
   │                ^^^^^^^^^^^^^^    ^ u256: Value
   │                │                  
   │                u256: Memory => Value

note: 
   ┌─ structs.fe:84:16
   │
84 │         assert val.numbers[0] == 1
   │                ^^^^^^^^^^^^^^^^^^^ bool: Value
85 │         assert val.numbers[1] == 2
   │                ^^^ Bar: Memory

note: 
   ┌─ structs.fe:85:16
   │
85 │         assert val.numbers[1] == 2
   │                ^^^^^^^^^^^ ^ u256: Value
   │                │            
   │                Array<u256, 2>: Memory

note: 
   ┌─ structs.fe:85:16
   │
85 │         assert val.numbers[1] == 2
   │                ^^^^^^^^^^^^^^    ^ u256: Value
   │                │                  
   │                u256: Memory => Value

note: 
   ┌─ structs.fe:85:16
   │
85 │         assert val.numbers[1] == 2
   │                ^^^^^^^^^^^^^^^^^^^ bool: Value
86 │         assert val.point.x == 100
   │                ^^^ Bar: Memory

note: 
   ┌─ structs.fe:86:16
   │
86 │         assert val.point.x == 100
   │                ^^^^^^^^^ Point: Memory

note: 
   ┌─ structs.fe:86:16
   │
86 │         assert val.point.x == 100
   │                ^^^^^^^^^^^    ^^^ u256: Value
   │                │               
   │                u256: Memory => Value

note: 
   ┌─ structs.fe:86:16
   │
86 │         assert val.point.x == 100
   │                ^^^^^^^^^^^^^^^^^^ bool: Value
87 │         assert val.point.y == 200
   │                ^^^ Bar: Memory

note: 
   ┌─ structs.fe:87:16
   │
87 │         assert val.point.y == 200
   │                ^^^^^^^^^ Point: Memory

note: 
   ┌─ structs.fe:87:16
   │
87 │         assert val.point.y == 200
   │                ^^^^^^^^^^^    ^^^ u256: Value
   │                │               
   │                u256: Memory => Value

note: 
   ┌─ structs.fe:87:16
   │
87 │         assert val.point.y == 200
   │                ^^^^^^^^^^^^^^^^^^ bool: Value
88 │         assert val.something.item0 == 1
   │                ^^^ Bar: Memory

note: 
   ┌─ structs.fe:88:16
   │
88 │         assert val.something.item0 == 1
   │                ^^^^^^^^^^^^^ (u256, bool): Memory

note: 
   ┌─ structs.fe:88:16
   │
88 │         assert val.something.item0 == 1
   │                ^^^^^^^^^^^^^^^^^^^    ^ u256: Value
   │                │                       
   │                u256: Memory => Value

note: 
   ┌─ structs.fe:88:16
   │
88 │         assert val.something.item0 == 1
   │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
89 │         assert val.something.item1
   │                ^^^ Bar: Memory

note: 
   ┌─ structs.fe:89:16
   │
89 │         assert val.something.item1
   │                ^^^^^^^^^^^^^ (u256, bool): Memory

note: 
   ┌─ structs.fe:89:16
   │
89 │         assert val.something.item1
   │                ^^^^^^^^^^^^^^^^^^^ bool: Memory => Value
90 │         val.numbers[0] = 10
   │         ^^^ Bar: Memory

note: 
   ┌─ structs.fe:90:9
   │
90 │         val.numbers[0] = 10
   │         ^^^^^^^^^^^ ^ u256: Value
   │         │            
   │         Array<u256, 2>: Memory

note: 
   ┌─ structs.fe:90:9
   │
90 │         val.numbers[0] = 10
   │         ^^^^^^^^^^^^^^   ^^ u256: Value
   │         │                 
   │         u256: Memory
91 │         val.numbers[1] = 20
   │         ^^^ Bar: Memory

note: 
   ┌─ structs.fe:91:9
   │
91 │         val.numbers[1] = 20
   │         ^^^^^^^^^^^ ^ u256: Value
   │         │            
   │         Array<u256, 2>: Memory

note: 
   ┌─ structs.fe:91:9
   │
91 │         val.numbers[1] = 20
   │         ^^^^^^^^^^^^^^   ^^ u256: Value
   │         │                 
   │         u256: Memory
92 │         assert val.numbers[0] == 10
   │                ^^^ Bar: Memory

note: 
   ┌─ structs.fe:92:16
   │
92 │         assert val.numbers[0] == 10
   │                ^^^^^^^^^^^ ^ u256: Value
   │                │            
   │                Array<u256, 2>: Memory

note: 
   ┌─ structs.fe:92:16
   │
92 │         assert val.numbers[0] == 10
   │                ^^^^^^^^^^^^^^    ^^ u256: Value
   │                │                  
   │                u256: Memory => Value

note: 
   ┌─ structs.fe:92:16
   │
92 │         assert val.numbers[0] == 10
   │                ^^^^^^^^^^^^^^^^^^^^ bool: Value
93 │         assert val.numbers[1] == 20
   │                ^^^ Bar: Memory

note: 
   ┌─ structs.fe:93:16
   │
93 │         assert val.numbers[1] == 20
   │                ^^^^^^^^^^^ ^ u256: Value
   │                │            
   │                Array<u256, 2>: Memory

note: 
   ┌─ structs.fe:93:16
   │
93 │         assert val.numbers[1] == 20
   │                ^^^^^^^^^^^^^^    ^^ u256: Value
   │                │                  
   │                u256: Memory => Value

note: 
   ┌─ structs.fe:93:16
   │
93 │         assert val.numbers[1] == 20
   │                ^^^^^^^^^^^^^^^^^^^^ bool: Value
94 │         val.numbers = [1, 2]
   │         ^^^ Bar: Memory

note: 
   ┌─ structs.fe:94:9
   │
94 │         val.numbers = [1, 2]
   │         ^^^^^^^^^^^    ^  ^ u256: Value
   │         │              │   
   │         │              u256: Value
   │         Array<u256, 2>: Memory

note: 
   ┌─ structs.fe:94:23
   │
94 │         val.numbers = [1, 2]
   │                       ^^^^^^ Array<u256, 2>: Memory
95 │         assert val.numbers[0] == 1
   │                ^^^ Bar: Memory

note: 
   ┌─ structs.fe:95:16
   │
95 │         assert val.numbers[0] == 1
   │                ^^^^^^^^^^^ ^ u256: Value
   │                │            
   │                Array<u256, 2>: Memory

note: 
   ┌─ structs.fe:95:16
   │
95 │         assert val.numbers[0] == 1
   │                ^^^^^^^^^^^^^^    ^ u256: Value
   │                │                  
   │                u256: Memory => Value

note: 
   ┌─ structs.fe:95:16
   │
95 │         assert val.numbers[0] == 1
   │                ^^^^^^^^^^^^^^^^^^^ bool: Value
96 │         assert val.numbers[1] == 2
   │                ^^^ Bar: Memory

note: 
   ┌─ structs.fe:96:16
   │
96 │         assert val.numbers[1] == 2
   │                ^^^^^^^^^^^ ^ u256: Value
   │                │            
   │                Array<u256, 2>: Memory

note: 
   ┌─ structs.fe:96:16
   │
96 │         assert val.numbers[1] == 2
   │                ^^^^^^^^^^^^^^    ^ u256: Value
   │                │                  
   │                u256: Memory => Value

note: 
   ┌─ structs.fe:96:16
   │
96 │         assert val.numbers[1] == 2
   │                ^^^^^^^^^^^^^^^^^^^ bool: Value
97 │         val.point.x = 1000
   │         ^^^ Bar: Memory

note: 
   ┌─ structs.fe:97:9
   │
97 │         val.point.x = 1000
   │         ^^^^^^^^^ Point: Memory

note: 
   ┌─ structs.fe:97:9
   │
97 │         val.point.x = 1000
   │         ^^^^^^^^^^^   ^^^^ u256: Value
   │         │              
   │         u256: Memory
98 │         val.point.y = 2000
   │         ^^^ Bar: Memory

note: 
   ┌─ structs.fe:98:9
   │
98 │         val.point.y = 2000
   │         ^^^^^^^^^ Point: Memory

note: 
   ┌─ structs.fe:98:9
   │
98 │         val.point.y = 2000
   │         ^^^^^^^^^^^   ^^^^ u256: Value
   │         │              
   │         u256: Memory
99 │         assert val.point.x == 1000
   │                ^^^ Bar: Memory

note: 
   ┌─ structs.fe:99:16
   │
99 │         assert val.point.x == 1000
   │                ^^^^^^^^^ Point: Memory

note: 
   ┌─ structs.fe:99:16
   │
99 │         assert val.point.x == 1000
   │                ^^^^^^^^^^^    ^^^^ u256: Value
   │                │               
   │                u256: Memory => Value

note: 
    ┌─ structs.fe:99:16
    │
 99 │         assert val.point.x == 1000
    │                ^^^^^^^^^^^^^^^^^^^ bool: Value
100 │         assert val.point.y == 2000
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:100:16
    │
100 │         assert val.point.y == 2000
    │                ^^^^^^^^^ Point: Memory

note: 
    ┌─ structs.fe:100:16
    │
100 │         assert val.point.y == 2000
    │                ^^^^^^^^^^^    ^^^^ u256: Value
    │                │               
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:100:16
    │
100 │         assert val.point.y == 2000
    │                ^^^^^^^^^^^^^^^^^^^ bool: Value
101 │         val.point = Point(x: 100, y: 200)
    │         ^^^ Bar: Memory

note: 
    ┌─ structs.fe:101:9
    │
101 │         val.point = Point(x: 100, y: 200)
    │         ^^^^^^^^^            ^^^     ^^^ u256: Value
    │         │                    │        
    │         │                    u256: Value
    │         Point: Memory

note: 
    ┌─ structs.fe:101:21
    │
101 │         val.point = Point(x: 100, y: 200)
    │                     ^^^^^^^^^^^^^^^^^^^^^ Point: Memory
102 │         assert val.point.x == 100
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:102:16
    │
102 │         assert val.point.x == 100
    │                ^^^^^^^^^ Point: Memory

note: 
    ┌─ structs.fe:102:16
    │
102 │         assert val.point.x == 100
    │                ^^^^^^^^^^^    ^^^ u256: Value
    │                │               
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:102:16
    │
102 │         assert val.point.x == 100
    │                ^^^^^^^^^^^^^^^^^^ bool: Value
103 │         assert val.point.y == 200
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:103:16
    │
103 │         assert val.point.y == 200
    │                ^^^^^^^^^ Point: Memory

note: 
    ┌─ structs.fe:103:16
    │
103 │         assert val.point.y == 200
    │                ^^^^^^^^^^^    ^^^ u256: Value
    │                │               
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:103:16
    │
103 │         assert val.point.y == 200
    │                ^^^^^^^^^^^^^^^^^^ bool: Value
104 │         val.something.item0 = 10
    │         ^^^ Bar: Memory

note: 
    ┌─ structs.fe:104:9
    │
104 │         val.something.item0 = 10
    │         ^^^^^^^^^^^^^ (u256, bool): Memory

note: 
    ┌─ structs.fe:104:9
    │
104 │         val.something.item0 = 10
    │         ^^^^^^^^^^^^^^^^^^^   ^^ u256: Value
    │         │                      
    │         u256: Memory
105 │         val.something.item1 = false
    │         ^^^ Bar: Memory

note: 
    ┌─ structs.fe:105:9
    │
105 │         val.something.item1 = false
    │         ^^^^^^^^^^^^^ (u256, bool): Memory

note: 
    ┌─ structs.fe:105:9
    │
105 │         val.something.item1 = false
    │         ^^^^^^^^^^^^^^^^^^^   ^^^^^ bool: Value
    │         │                      
    │         bool: Memory
106 │         assert val.something.item0 == 10
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:106:16
    │
106 │         assert val.something.item0 == 10
    │                ^^^^^^^^^^^^^ (u256, bool): Memory

note: 
    ┌─ structs.fe:106:16
    │
106 │         assert val.something.item0 == 10
    │                ^^^^^^^^^^^^^^^^^^^    ^^ u256: Value
    │                │                       
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:106:16
    │
106 │         assert val.something.item0 == 10
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
107 │         assert not val.something.item1
    │                    ^^^ Bar: Memory

note: 
    ┌─ structs.fe:107:20
    │
107 │         assert not val.something.item1
    │                    ^^^^^^^^^^^^^ (u256, bool): Memory

note: 
    ┌─ structs.fe:107:20
    │
107 │         assert not val.something.item1
    │                    ^^^^^^^^^^^^^^^^^^^ bool: Memory => Value

note: 
    ┌─ structs.fe:107:16
    │
107 │         assert not val.something.item1
    │                ^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
108 │         val.something = (1, true)
    │         ^^^ Bar: Memory

note: 
    ┌─ structs.fe:108:9
    │
108 │         val.something = (1, true)
    │         ^^^^^^^^^^^^^    ^  ^^^^ bool: Value
    │         │                │   
    │         │                u256: Value
    │         (u256, bool): Memory

note: 
    ┌─ structs.fe:108:25
    │
108 │         val.something = (1, true)
    │                         ^^^^^^^^^ (u256, bool): Memory
109 │         assert val.something.item0 == 1
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:109:16
    │
109 │         assert val.something.item0 == 1
    │                ^^^^^^^^^^^^^ (u256, bool): Memory

note: 
    ┌─ structs.fe:109:16
    │
109 │         assert val.something.item0 == 1
    │                ^^^^^^^^^^^^^^^^^^^    ^ u256: Value
    │                │                       
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:109:16
    │
109 │         assert val.something.item0 == 1
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
110 │         assert val.something.item1
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:110:16
    │
110 │         assert val.something.item1
    │                ^^^^^^^^^^^^^ (u256, bool): Memory

note: 
    ┌─ structs.fe:110:16
    │
110 │         assert val.something.item1
    │                ^^^^^^^^^^^^^^^^^^^ bool: Memory => Value
111 │         return val.name
    │                ^^^ Bar: Memory

note: 
    ┌─ structs.fe:111:16
    │
111 │         return val.name
    │                ^^^^^^^^ String<3>: Memory

note: 
    ┌─ structs.fe:114:5
    │  
114 │ ╭     pub fn create_mixed(self) -> u256 {
115 │ │         let mixed: Mixed = Mixed::new(val: 1)
116 │ │         return mixed.foo
117 │ │     }
    │ ╰─────^ self: Some(Mutable), params: [] -> u256

note: 
    ┌─ structs.fe:115:13
    │
115 │         let mixed: Mixed = Mixed::new(val: 1)
    │             ^^^^^ Mixed

note: 
    ┌─ structs.fe:115:44
    │
115 │         let mixed: Mixed = Mixed::new(val: 1)
    │                                            ^ u256: Value

note: 
    ┌─ structs.fe:115:28
    │
115 │         let mixed: Mixed = Mixed::new(val: 1)
    │                            ^^^^^^^^^^^^^^^^^^ Mixed: Memory
116 │         return mixed.foo
    │                ^^^^^ Mixed: Memory

note: 
    ┌─ structs.fe:116:16
    │
116 │         return mixed.foo
    │                ^^^^^^^^^ u256: Memory => Value

note: 
    ┌─ structs.fe:119:5
    │  
119 │ ╭     pub fn set_house(self, data: House) {
120 │ │         self.my_house = data
121 │ │     }
    │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: data, typ: House }] -> ()

note: 
    ┌─ structs.fe:120:9
    │
120 │         self.my_house = data
    │         ^^^^ Foo: Value

note: 
    ┌─ structs.fe:120:9
    │
120 │         self.my_house = data
    │         ^^^^^^^^^^^^^   ^^^^ House: Memory
    │         │                
    │         House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:123:5
    │  
123 │ ╭     pub fn get_house(self) -> House {
124 │ │         return self.my_house.to_mem()
125 │ │     }
    │ ╰─────^ self: Some(Mutable), params: [] -> House

note: 
    ┌─ structs.fe:124:16
    │
124 │         return self.my_house.to_mem()
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:124:16
    │
124 │         return self.my_house.to_mem()
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:124:16
    │
124 │         return self.my_house.to_mem()
    │                ^^^^^^^^^^^^^^^^^^^^^^ House: Storage { nonce: Some(0) } => Memory

note: 
    ┌─ structs.fe:127:5
    │  
127 │ ╭     pub fn create_house(self) {
128 │ │         self.my_house = House(price: 1, size: 2, rooms: u8(5), vacant: false)
129 │ │         assert self.my_house.price == 1
130 │ │         assert self.my_house.size == 2
    · │
152 │ │         assert self.my_house.vacant
153 │ │     }
    │ ╰─────^ self: Some(Mutable), params: [] -> ()

note: 
    ┌─ structs.fe:128:9
    │
128 │         self.my_house = House(price: 1, size: 2, rooms: u8(5), vacant: false)
    │         ^^^^ Foo: Value

note: 
    ┌─ structs.fe:128:9
    │
128 │         self.my_house = House(price: 1, size: 2, rooms: u8(5), vacant: false)
    │         ^^^^^^^^^^^^^                ^        ^            ^ u8: Value
    │         │                            │        │             
    │         │                            │        u256: Value
    │         │                            u256: Value
    │         House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:128:57
    │
128 │         self.my_house = House(price: 1, size: 2, rooms: u8(5), vacant: false)
    │                                                         ^^^^^          ^^^^^ bool: Value
    │                                                         │               
    │                                                         u8: Value

note: 
    ┌─ structs.fe:128:25
    │
128 │         self.my_house = House(price: 1, size: 2, rooms: u8(5), vacant: false)
    │                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ House: Memory
129 │         assert self.my_house.price == 1
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:129:16
    │
129 │         assert self.my_house.price == 1
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:129:16
    │
129 │         assert self.my_house.price == 1
    │                ^^^^^^^^^^^^^^^^^^^    ^ u256: Value
    │                │                       
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:129:16
    │
129 │         assert self.my_house.price == 1
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
130 │         assert self.my_house.size == 2
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:130:16
    │
130 │         assert self.my_house.size == 2
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:130:16
    │
130 │         assert self.my_house.size == 2
    │                ^^^^^^^^^^^^^^^^^^    ^ u256: Value
    │                │                      
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:130:16
    │
130 │         assert self.my_house.size == 2
    │                ^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
131 │         assert self.my_house.rooms == u8(5)
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:131:16
    │
131 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:131:16
    │
131 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^^^^^^^       ^ u8: Value
    │                │                          
    │                u8: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:131:39
    │
131 │         assert self.my_house.rooms == u8(5)
    │                                       ^^^^^ u8: Value

note: 
    ┌─ structs.fe:131:16
    │
131 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
132 │         assert self.my_house.vacant == false
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:132:16
    │
132 │         assert self.my_house.vacant == false
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:132:16
    │
132 │         assert self.my_house.vacant == false
    │                ^^^^^^^^^^^^^^^^^^^^    ^^^^^ bool: Value
    │                │                        
    │                bool: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:132:16
    │
132 │         assert self.my_house.vacant == false
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
133 │         self.my_house.size = 50
    │         ^^^^ Foo: Value

note: 
    ┌─ structs.fe:133:9
    │
133 │         self.my_house.size = 50
    │         ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:133:9
    │
133 │         self.my_house.size = 50
    │         ^^^^^^^^^^^^^^^^^^   ^^ u256: Value
    │         │                     
    │         u256: Storage { nonce: Some(0) }
134 │         assert self.my_house.size == 50
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:134:16
    │
134 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:134:16
    │
134 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^^^^^^    ^^ u256: Value
    │                │                      
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:134:16
    │
134 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
135 │         assert self.my_house.price == 1
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:135:16
    │
135 │         assert self.my_house.price == 1
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:135:16
    │
135 │         assert self.my_house.price == 1
    │                ^^^^^^^^^^^^^^^^^^^    ^ u256: Value
    │                │                       
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:135:16
    │
135 │         assert self.my_house.price == 1
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
136 │         assert self.my_house.rooms == u8(5)
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:136:16
    │
136 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:136:16
    │
136 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^^^^^^^       ^ u8: Value
    │                │                          
    │                u8: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:136:39
    │
136 │         assert self.my_house.rooms == u8(5)
    │                                       ^^^^^ u8: Value

note: 
    ┌─ structs.fe:136:16
    │
136 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
137 │         assert self.my_house.vacant == false
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:137:16
    │
137 │         assert self.my_house.vacant == false
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:137:16
    │
137 │         assert self.my_house.vacant == false
    │                ^^^^^^^^^^^^^^^^^^^^    ^^^^^ bool: Value
    │                │                        
    │                bool: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:137:16
    │
137 │         assert self.my_house.vacant == false
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
138 │         self.my_house.price = 1000
    │         ^^^^ Foo: Value

note: 
    ┌─ structs.fe:138:9
    │
138 │         self.my_house.price = 1000
    │         ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:138:9
    │
138 │         self.my_house.price = 1000
    │         ^^^^^^^^^^^^^^^^^^^   ^^^^ u256: Value
    │         │                      
    │         u256: Storage { nonce: Some(0) }
139 │         assert self.my_house.size == 50
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:139:16
    │
139 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:139:16
    │
139 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^^^^^^    ^^ u256: Value
    │                │                      
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:139:16
    │
139 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
140 │         assert self.my_house.price == 1000
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:140:16
    │
140 │         assert self.my_house.price == 1000
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:140:16
    │
140 │         assert self.my_house.price == 1000
    │                ^^^^^^^^^^^^^^^^^^^    ^^^^ u256: Value
    │                │                       
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:140:16
    │
140 │         assert self.my_house.price == 1000
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
141 │         assert self.my_house.rooms == u8(5)
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:141:16
    │
141 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:141:16
    │
141 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^^^^^^^       ^ u8: Value
    │                │                          
    │                u8: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:141:39
    │
141 │         assert self.my_house.rooms == u8(5)
    │                                       ^^^^^ u8: Value

note: 
    ┌─ structs.fe:141:16
    │
141 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
142 │         assert self.my_house.vacant == false
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:142:16
    │
142 │         assert self.my_house.vacant == false
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:142:16
    │
142 │         assert self.my_house.vacant == false
    │                ^^^^^^^^^^^^^^^^^^^^    ^^^^^ bool: Value
    │                │                        
    │                bool: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:142:16
    │
142 │         assert self.my_house.vacant == false
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
143 │         self.my_house.vacant = true
    │         ^^^^ Foo: Value

note: 
    ┌─ structs.fe:143:9
    │
143 │         self.my_house.vacant = true
    │         ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:143:9
    │
143 │         self.my_house.vacant = true
    │         ^^^^^^^^^^^^^^^^^^^^   ^^^^ bool: Value
    │         │                       
    │         bool: Storage { nonce: Some(0) }
144 │         assert self.my_house.size == 50
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:144:16
    │
144 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:144:16
    │
144 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^^^^^^    ^^ u256: Value
    │                │                      
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:144:16
    │
144 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
145 │         assert self.my_house.price == 1000
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:145:16
    │
145 │         assert self.my_house.price == 1000
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:145:16
    │
145 │         assert self.my_house.price == 1000
    │                ^^^^^^^^^^^^^^^^^^^    ^^^^ u256: Value
    │                │                       
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:145:16
    │
145 │         assert self.my_house.price == 1000
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
146 │         assert self.my_house.rooms == u8(5)
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:146:16
    │
146 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:146:16
    │
146 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^^^^^^^       ^ u8: Value
    │                │                          
    │                u8: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:146:39
    │
146 │         assert self.my_house.rooms == u8(5)
    │                                       ^^^^^ u8: Value

note: 
    ┌─ structs.fe:146:16
    │
146 │         assert self.my_house.rooms == u8(5)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
147 │         assert self.my_house.vacant
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:147:16
    │
147 │         assert self.my_house.vacant
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:147:16
    │
147 │         assert self.my_house.vacant
    │                ^^^^^^^^^^^^^^^^^^^^ bool: Storage { nonce: Some(0) } => Value
148 │         self.my_house.rooms = u8(100)
    │         ^^^^ Foo: Value

note: 
    ┌─ structs.fe:148:9
    │
148 │         self.my_house.rooms = u8(100)
    │         ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:148:9
    │
148 │         self.my_house.rooms = u8(100)
    │         ^^^^^^^^^^^^^^^^^^^      ^^^ u8: Value
    │         │                         
    │         u8: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:148:31
    │
148 │         self.my_house.rooms = u8(100)
    │                               ^^^^^^^ u8: Value
149 │         assert self.my_house.size == 50
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:149:16
    │
149 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:149:16
    │
149 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^^^^^^    ^^ u256: Value
    │                │                      
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:149:16
    │
149 │         assert self.my_house.size == 50
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
150 │         assert self.my_house.price == 1000
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:150:16
    │
150 │         assert self.my_house.price == 1000
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:150:16
    │
150 │         assert self.my_house.price == 1000
    │                ^^^^^^^^^^^^^^^^^^^    ^^^^ u256: Value
    │                │                       
    │                u256: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:150:16
    │
150 │         assert self.my_house.price == 1000
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
151 │         assert self.my_house.rooms == u8(100)
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:151:16
    │
151 │         assert self.my_house.rooms == u8(100)
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:151:16
    │
151 │         assert self.my_house.rooms == u8(100)
    │                ^^^^^^^^^^^^^^^^^^^       ^^^ u8: Value
    │                │                          
    │                u8: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:151:39
    │
151 │         assert self.my_house.rooms == u8(100)
    │                                       ^^^^^^^ u8: Value

note: 
    ┌─ structs.fe:151:16
    │
151 │         assert self.my_house.rooms == u8(100)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
152 │         assert self.my_house.vacant
    │                ^^^^ Foo: Value

note: 
    ┌─ structs.fe:152:16
    │
152 │         assert self.my_house.vacant
    │                ^^^^^^^^^^^^^ House: Storage { nonce: Some(0) }

note: 
    ┌─ structs.fe:152:16
    │
152 │         assert self.my_house.vacant
    │                ^^^^^^^^^^^^^^^^^^^^ bool: Storage { nonce: Some(0) } => Value

note: 
    ┌─ structs.fe:155:5
    │  
155 │ ╭     pub fn bar() -> u256 {
156 │ │         let building: House = House(price: 300, size: 500, rooms: u8(20), vacant: true)
157 │ │         assert building.size == 500
158 │ │         assert building.price == 300
    · │
172 │ │         return building.size
173 │ │     }
    │ ╰─────^ self: None, params: [] -> u256

note: 
    ┌─ structs.fe:156:13
    │
156 │         let building: House = House(price: 300, size: 500, rooms: u8(20), vacant: true)
    │             ^^^^^^^^ House

note: 
    ┌─ structs.fe:156:44
    │
156 │         let building: House = House(price: 300, size: 500, rooms: u8(20), vacant: true)
    │                                            ^^^        ^^^            ^^ u8: Value
    │                                            │          │               
    │                                            │          u256: Value
    │                                            u256: Value

note: 
    ┌─ structs.fe:156:67
    │
156 │         let building: House = House(price: 300, size: 500, rooms: u8(20), vacant: true)
    │                                                                   ^^^^^^          ^^^^ bool: Value
    │                                                                   │                
    │                                                                   u8: Value

note: 
    ┌─ structs.fe:156:31
    │
156 │         let building: House = House(price: 300, size: 500, rooms: u8(20), vacant: true)
    │                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ House: Memory
157 │         assert building.size == 500
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:157:16
    │
157 │         assert building.size == 500
    │                ^^^^^^^^^^^^^    ^^^ u256: Value
    │                │                 
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:157:16
    │
157 │         assert building.size == 500
    │                ^^^^^^^^^^^^^^^^^^^^ bool: Value
158 │         assert building.price == 300
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:158:16
    │
158 │         assert building.price == 300
    │                ^^^^^^^^^^^^^^    ^^^ u256: Value
    │                │                  
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:158:16
    │
158 │         assert building.price == 300
    │                ^^^^^^^^^^^^^^^^^^^^^ bool: Value
159 │         assert building.rooms == u8(20)
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:159:16
    │
159 │         assert building.rooms == u8(20)
    │                ^^^^^^^^^^^^^^       ^^ u8: Value
    │                │                     
    │                u8: Memory => Value

note: 
    ┌─ structs.fe:159:34
    │
159 │         assert building.rooms == u8(20)
    │                                  ^^^^^^ u8: Value

note: 
    ┌─ structs.fe:159:16
    │
159 │         assert building.rooms == u8(20)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
160 │         assert building.vacant
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:160:16
    │
160 │         assert building.vacant
    │                ^^^^^^^^^^^^^^^ bool: Memory => Value
161 │         building.vacant = false
    │         ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:161:9
    │
161 │         building.vacant = false
    │         ^^^^^^^^^^^^^^^   ^^^^^ bool: Value
    │         │                  
    │         bool: Memory
162 │         building.price = 1
    │         ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:162:9
    │
162 │         building.price = 1
    │         ^^^^^^^^^^^^^^   ^ u256: Value
    │         │                 
    │         u256: Memory
163 │         building.size = 2
    │         ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:163:9
    │
163 │         building.size = 2
    │         ^^^^^^^^^^^^^   ^ u256: Value
    │         │                
    │         u256: Memory
164 │         building.rooms = u8(10)
    │         ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:164:9
    │
164 │         building.rooms = u8(10)
    │         ^^^^^^^^^^^^^^      ^^ u8: Value
    │         │                    
    │         u8: Memory

note: 
    ┌─ structs.fe:164:26
    │
164 │         building.rooms = u8(10)
    │                          ^^^^^^ u8: Value
165 │         assert building.vacant == false
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:165:16
    │
165 │         assert building.vacant == false
    │                ^^^^^^^^^^^^^^^    ^^^^^ bool: Value
    │                │                   
    │                bool: Memory => Value

note: 
    ┌─ structs.fe:165:16
    │
165 │         assert building.vacant == false
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
166 │         assert building.price == 1
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:166:16
    │
166 │         assert building.price == 1
    │                ^^^^^^^^^^^^^^    ^ u256: Value
    │                │                  
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:166:16
    │
166 │         assert building.price == 1
    │                ^^^^^^^^^^^^^^^^^^^ bool: Value
167 │         assert building.size == 2
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:167:16
    │
167 │         assert building.size == 2
    │                ^^^^^^^^^^^^^    ^ u256: Value
    │                │                 
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:167:16
    │
167 │         assert building.size == 2
    │                ^^^^^^^^^^^^^^^^^^ bool: Value
168 │         assert building.rooms == u8(10)
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:168:16
    │
168 │         assert building.rooms == u8(10)
    │                ^^^^^^^^^^^^^^       ^^ u8: Value
    │                │                     
    │                u8: Memory => Value

note: 
    ┌─ structs.fe:168:34
    │
168 │         assert building.rooms == u8(10)
    │                                  ^^^^^^ u8: Value

note: 
    ┌─ structs.fe:168:16
    │
168 │         assert building.rooms == u8(10)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
169 │         building.expand()
    │         ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:169:9
    │
169 │         building.expand()
    │         ^^^^^^^^^^^^^^^^^ (): Value
170 │         assert building.size == 102
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:170:16
    │
170 │         assert building.size == 102
    │                ^^^^^^^^^^^^^    ^^^ u256: Value
    │                │                 
    │                u256: Memory => Value

note: 
    ┌─ structs.fe:170:16
    │
170 │         assert building.size == 102
    │                ^^^^^^^^^^^^^^^^^^^^ bool: Value
171 │         assert building.rooms == 11
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:171:16
    │
171 │         assert building.rooms == 11
    │                ^^^^^^^^^^^^^^    ^^ u8: Value
    │                │                  
    │                u8: Memory => Value

note: 
    ┌─ structs.fe:171:16
    │
171 │         assert building.rooms == 11
    │                ^^^^^^^^^^^^^^^^^^^^ bool: Value
172 │         return building.size
    │                ^^^^^^^^ House: Memory

note: 
    ┌─ structs.fe:172:16
    │
172 │         return building.size
    │                ^^^^^^^^^^^^^ u256: Memory => Value

note: 
    ┌─ structs.fe:175:5
    │  
175 │ ╭     pub fn encode_house() -> Array<u8, 128> {
176 │ │         let house: House = House(price: 300, size: 500, rooms: u8(20), vacant: true)
177 │ │         return house.encode()
178 │ │     }
    │ ╰─────^ self: None, params: [] -> Array<u8, 128>

note: 
    ┌─ structs.fe:176:13
    │
176 │         let house: House = House(price: 300, size: 500, rooms: u8(20), vacant: true)
    │             ^^^^^ House

note: 
    ┌─ structs.fe:176:41
    │
176 │         let house: House = House(price: 300, size: 500, rooms: u8(20), vacant: true)
    │                                         ^^^        ^^^            ^^ u8: Value
    │                                         │          │               
    │                                         │          u256: Value
    │                                         u256: Value

note: 
    ┌─ structs.fe:176:64
    │
176 │         let house: House = House(price: 300, size: 500, rooms: u8(20), vacant: true)
    │                                                                ^^^^^^          ^^^^ bool: Value
    │                                                                │                
    │                                                                u8: Value

note: 
    ┌─ structs.fe:176:28
    │
176 │         let house: House = House(price: 300, size: 500, rooms: u8(20), vacant: true)
    │                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ House: Memory
177 │         return house.encode()
    │                ^^^^^ House: Memory

note: 
    ┌─ structs.fe:177:16
    │
177 │         return house.encode()
    │                ^^^^^^^^^^^^^^ Array<u8, 128>: Memory

note: 
    ┌─ structs.fe:180:5
    │  
180 │ ╭     pub fn hashed_house() -> u256 {
181 │ │         let house: House = House(price: 300, size: 500, rooms: u8(20), vacant: true)
182 │ │         return house.hash()
183 │ │     }
    │ ╰─────^ self: None, params: [] -> u256

note: 
    ┌─ structs.fe:181:13
    │
181 │         let house: House = House(price: 300, size: 500, rooms: u8(20), vacant: true)
    │             ^^^^^ House

note: 
    ┌─ structs.fe:181:41
    │
181 │         let house: House = House(price: 300, size: 500, rooms: u8(20), vacant: true)
    │                                         ^^^        ^^^            ^^ u8: Value
    │                                         │          │               
    │                                         │          u256: Value
    │                                         u256: Value

note: 
    ┌─ structs.fe:181:64
    │
181 │         let house: House = House(price: 300, size: 500, rooms: u8(20), vacant: true)
    │                                                                ^^^^^^          ^^^^ bool: Value
    │                                                                │                
    │                                                                u8: Value

note: 
    ┌─ structs.fe:181:28
    │
181 │         let house: House = House(price: 300, size: 500, rooms: u8(20), vacant: true)
    │                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ House: Memory
182 │         return house.hash()
    │                ^^^^^ House: Memory

note: 
    ┌─ structs.fe:182:16
    │
182 │         return house.hash()
    │                ^^^^^^^^^^^^ u256: Value


