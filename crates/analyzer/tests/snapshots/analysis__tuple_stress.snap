---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ tuple_stress.fe:4:5
  │
4 │     my_sto_tuple: (u256, i32)
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, i32)

note: 
  ┌─ tuple_stress.fe:7:9
  │
7 │         my_tuple: (u256, bool, address)
  │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, bool, address)

note: 
   ┌─ tuple_stress.fe:10:5
   │  
10 │ ╭     pub fn build_my_tuple(my_num: u256, my_bool: bool, my_address: address) -> (u256, bool, address) {
11 │ │         return (my_num, my_bool, my_address)
12 │ │     }
   │ ╰─────^ self: None, params: [{ label: None, name: my_num, typ: u256 }, { label: None, name: my_bool, typ: bool }, { label: None, name: my_address, typ: address }] -> (u256, bool, address)

note: 
   ┌─ tuple_stress.fe:11:17
   │
11 │         return (my_num, my_bool, my_address)
   │                 ^^^^^^  ^^^^^^^  ^^^^^^^^^^ address: Value
   │                 │       │         
   │                 │       bool: Value
   │                 u256: Value

note: 
   ┌─ tuple_stress.fe:11:16
   │
11 │         return (my_num, my_bool, my_address)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, bool, address): Memory

note: 
   ┌─ tuple_stress.fe:14:5
   │  
14 │ ╭     pub fn read_my_tuple_item0(my_tuple: (u256, bool, address)) -> u256 {
15 │ │         return my_tuple.item0
16 │ │     }
   │ ╰─────^ self: None, params: [{ label: None, name: my_tuple, typ: (u256, bool, address) }] -> u256

note: 
   ┌─ tuple_stress.fe:15:16
   │
15 │         return my_tuple.item0
   │                ^^^^^^^^ (u256, bool, address): Memory

note: 
   ┌─ tuple_stress.fe:15:16
   │
15 │         return my_tuple.item0
   │                ^^^^^^^^^^^^^^ u256: Memory => Value

note: 
   ┌─ tuple_stress.fe:18:5
   │  
18 │ ╭     pub fn read_my_tuple_item1(my_tuple: (u256, bool, address)) -> bool {
19 │ │         return my_tuple.item1
20 │ │     }
   │ ╰─────^ self: None, params: [{ label: None, name: my_tuple, typ: (u256, bool, address) }] -> bool

note: 
   ┌─ tuple_stress.fe:19:16
   │
19 │         return my_tuple.item1
   │                ^^^^^^^^ (u256, bool, address): Memory

note: 
   ┌─ tuple_stress.fe:19:16
   │
19 │         return my_tuple.item1
   │                ^^^^^^^^^^^^^^ bool: Memory => Value

note: 
   ┌─ tuple_stress.fe:22:5
   │  
22 │ ╭     pub fn read_my_tuple_item2(my_tuple: (u256, bool, address)) -> address {
23 │ │         return my_tuple.item2
24 │ │     }
   │ ╰─────^ self: None, params: [{ label: None, name: my_tuple, typ: (u256, bool, address) }] -> address

note: 
   ┌─ tuple_stress.fe:23:16
   │
23 │         return my_tuple.item2
   │                ^^^^^^^^ (u256, bool, address): Memory

note: 
   ┌─ tuple_stress.fe:23:16
   │
23 │         return my_tuple.item2
   │                ^^^^^^^^^^^^^^ address: Memory => Value

note: 
   ┌─ tuple_stress.fe:26:5
   │  
26 │ ╭     pub fn read_my_tuple_item10(my_tuple: (u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, address)) -> address {
27 │ │         return my_tuple.item10
28 │ │     }
   │ ╰─────^ self: None, params: [{ label: None, name: my_tuple, typ: (u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, address) }] -> address

note: 
   ┌─ tuple_stress.fe:27:16
   │
27 │         return my_tuple.item10
   │                ^^^^^^^^ (u256, u256, u256, u256, u256, u256, u256, u256, u256, u256, address): Memory

note: 
   ┌─ tuple_stress.fe:27:16
   │
27 │         return my_tuple.item10
   │                ^^^^^^^^^^^^^^^ address: Memory => Value

note: 
   ┌─ tuple_stress.fe:30:5
   │  
30 │ ╭     pub fn emit_my_event(ctx: Context, my_tuple: (u256, bool, address)) {
31 │ │         emit MyEvent(ctx, my_tuple)
32 │ │     }
   │ ╰─────^ self: None, params: [{ label: None, name: ctx, typ: Context }, { label: None, name: my_tuple, typ: (u256, bool, address) }] -> ()

note: 
   ┌─ tuple_stress.fe:31:22
   │
31 │         emit MyEvent(ctx, my_tuple)
   │                      ^^^  ^^^^^^^^ (u256, bool, address): Memory
   │                      │     
   │                      Context: Memory

note: 
   ┌─ tuple_stress.fe:34:5
   │  
34 │ ╭     pub fn set_my_sto_tuple(self, my_u256: u256, my_i32: i32) {
35 │ │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
36 │ │         self.my_sto_tuple = (my_u256, my_i32)
37 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: my_u256, typ: u256 }, { label: None, name: my_i32, typ: i32 }] -> ()

note: 
   ┌─ tuple_stress.fe:35:16
   │
35 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^ Foo: Value

note: 
   ┌─ tuple_stress.fe:35:16
   │
35 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^^^^^^^^^^^^^^ (u256, i32): Storage { nonce: Some(0) }

note: 
   ┌─ tuple_stress.fe:35:16
   │
35 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^^^^^^^^^^^^^^^^^^^^         ^ u256: Value
   │                │                                
   │                u256: Storage { nonce: Some(0) } => Value

note: 
   ┌─ tuple_stress.fe:35:43
   │
35 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                           ^^^^^^^ u256: Value

note: 
   ┌─ tuple_stress.fe:35:16
   │
35 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^     ^^^^ Foo: Value
   │                │                                       
   │                bool: Value

note: 
   ┌─ tuple_stress.fe:35:55
   │
35 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                                       ^^^^^^^^^^^^^^^^^ (u256, i32): Storage { nonce: Some(0) }

note: 
   ┌─ tuple_stress.fe:35:55
   │
35 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                                       ^^^^^^^^^^^^^^^^^^^^^^^        ^ i32: Value
   │                                                       │                               
   │                                                       i32: Storage { nonce: Some(0) } => Value

note: 
   ┌─ tuple_stress.fe:35:82
   │
35 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                                                                  ^^^^^^ i32: Value

note: 
   ┌─ tuple_stress.fe:35:55
   │
35 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value

note: 
   ┌─ tuple_stress.fe:35:16
   │
35 │         assert self.my_sto_tuple.item0 == u256(0) and self.my_sto_tuple.item1 == i32(0)
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
36 │         self.my_sto_tuple = (my_u256, my_i32)
   │         ^^^^ Foo: Value

note: 
   ┌─ tuple_stress.fe:36:9
   │
36 │         self.my_sto_tuple = (my_u256, my_i32)
   │         ^^^^^^^^^^^^^^^^^    ^^^^^^^  ^^^^^^ i32: Value
   │         │                    │         
   │         │                    u256: Value
   │         (u256, i32): Storage { nonce: Some(0) }

note: 
   ┌─ tuple_stress.fe:36:29
   │
36 │         self.my_sto_tuple = (my_u256, my_i32)
   │                             ^^^^^^^^^^^^^^^^^ (u256, i32): Memory

note: 
   ┌─ tuple_stress.fe:39:5
   │  
39 │ ╭     pub fn get_my_sto_tuple(self) -> (u256, i32) {
40 │ │         return self.my_sto_tuple.to_mem()
41 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> (u256, i32)

note: 
   ┌─ tuple_stress.fe:40:16
   │
40 │         return self.my_sto_tuple.to_mem()
   │                ^^^^ Foo: Value

note: 
   ┌─ tuple_stress.fe:40:16
   │
40 │         return self.my_sto_tuple.to_mem()
   │                ^^^^^^^^^^^^^^^^^ (u256, i32): Storage { nonce: Some(0) }

note: 
   ┌─ tuple_stress.fe:40:16
   │
40 │         return self.my_sto_tuple.to_mem()
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, i32): Storage { nonce: Some(0) } => Memory

note: 
   ┌─ tuple_stress.fe:43:5
   │  
43 │ ╭     pub fn build_tuple_and_emit(self, ctx: Context) {
44 │ │         let my_num: u256 = self.my_sto_tuple.item0
45 │ │         let my_tuple: (u256, bool, address) = (self.my_sto_tuple.item0, true and false, address(26))
46 │ │         emit_my_event(ctx, my_tuple)
47 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }] -> ()

note: 
   ┌─ tuple_stress.fe:44:13
   │
44 │         let my_num: u256 = self.my_sto_tuple.item0
   │             ^^^^^^ u256
45 │         let my_tuple: (u256, bool, address) = (self.my_sto_tuple.item0, true and false, address(26))
   │             ^^^^^^^^ (u256, bool, address)

note: 
   ┌─ tuple_stress.fe:44:28
   │
44 │         let my_num: u256 = self.my_sto_tuple.item0
   │                            ^^^^ Foo: Value

note: 
   ┌─ tuple_stress.fe:44:28
   │
44 │         let my_num: u256 = self.my_sto_tuple.item0
   │                            ^^^^^^^^^^^^^^^^^ (u256, i32): Storage { nonce: Some(0) }

note: 
   ┌─ tuple_stress.fe:44:28
   │
44 │         let my_num: u256 = self.my_sto_tuple.item0
   │                            ^^^^^^^^^^^^^^^^^^^^^^^ u256: Storage { nonce: Some(0) } => Value
45 │         let my_tuple: (u256, bool, address) = (self.my_sto_tuple.item0, true and false, address(26))
   │                                                ^^^^ Foo: Value

note: 
   ┌─ tuple_stress.fe:45:48
   │
45 │         let my_tuple: (u256, bool, address) = (self.my_sto_tuple.item0, true and false, address(26))
   │                                                ^^^^^^^^^^^^^^^^^ (u256, i32): Storage { nonce: Some(0) }

note: 
   ┌─ tuple_stress.fe:45:48
   │
45 │         let my_tuple: (u256, bool, address) = (self.my_sto_tuple.item0, true and false, address(26))
   │                                                ^^^^^^^^^^^^^^^^^^^^^^^  ^^^^     ^^^^^ bool: Value
   │                                                │                        │         
   │                                                │                        bool: Value
   │                                                u256: Storage { nonce: Some(0) } => Value

note: 
   ┌─ tuple_stress.fe:45:73
   │
45 │         let my_tuple: (u256, bool, address) = (self.my_sto_tuple.item0, true and false, address(26))
   │                                                                         ^^^^^^^^^^^^^^          ^^ u256: Value
   │                                                                         │                        
   │                                                                         bool: Value

note: 
   ┌─ tuple_stress.fe:45:89
   │
45 │         let my_tuple: (u256, bool, address) = (self.my_sto_tuple.item0, true and false, address(26))
   │                                                                                         ^^^^^^^^^^^ address: Value

note: 
   ┌─ tuple_stress.fe:45:47
   │
45 │         let my_tuple: (u256, bool, address) = (self.my_sto_tuple.item0, true and false, address(26))
   │                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (u256, bool, address): Memory
46 │         emit_my_event(ctx, my_tuple)
   │                       ^^^  ^^^^^^^^ (u256, bool, address): Memory
   │                       │     
   │                       Context: Memory

note: 
   ┌─ tuple_stress.fe:46:9
   │
46 │         emit_my_event(ctx, my_tuple)
   │         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value

note: 
   ┌─ tuple_stress.fe:49:5
   │  
49 │ ╭     pub fn encode_my_tuple(my_tuple: (u256, bool, address)) -> Array<u8, 96> {
50 │ │         return my_tuple.abi_encode()
51 │ │     }
   │ ╰─────^ self: None, params: [{ label: None, name: my_tuple, typ: (u256, bool, address) }] -> Array<u8, 96>

note: 
   ┌─ tuple_stress.fe:50:16
   │
50 │         return my_tuple.abi_encode()
   │                ^^^^^^^^ (u256, bool, address): Memory

note: 
   ┌─ tuple_stress.fe:50:16
   │
50 │         return my_tuple.abi_encode()
   │                ^^^^^^^^^^^^^^^^^^^^^ Array<u8, 96>: Memory


