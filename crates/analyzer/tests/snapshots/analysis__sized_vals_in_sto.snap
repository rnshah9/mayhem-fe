---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ sized_vals_in_sto.fe:4:5
  │
4 │     num: u256
  │     ^^^^^^^^^ u256
5 │     nums: Array<u256, 42>
  │     ^^^^^^^^^^^^^^^^^^^^^ Array<u256, 42>
6 │     str: String<26>
  │     ^^^^^^^^^^^^^^^ String<26>

note: 
   ┌─ sized_vals_in_sto.fe:9:9
   │
 9 │         num: u256
   │         ^^^^^^^^^ u256
10 │         nums: Array<u256, 42>
   │         ^^^^^^^^^^^^^^^^^^^^^ Array<u256, 42>
11 │         str: String<26>
   │         ^^^^^^^^^^^^^^^ String<26>

note: 
   ┌─ sized_vals_in_sto.fe:14:5
   │  
14 │ ╭     pub fn write_num(self, x: u256) {
15 │ │         self.num = x
16 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: x, typ: u256 }] -> ()

note: 
   ┌─ sized_vals_in_sto.fe:15:9
   │
15 │         self.num = x
   │         ^^^^ Foo: Value

note: 
   ┌─ sized_vals_in_sto.fe:15:9
   │
15 │         self.num = x
   │         ^^^^^^^^   ^ u256: Value
   │         │           
   │         u256: Storage { nonce: Some(0) }

note: 
   ┌─ sized_vals_in_sto.fe:18:5
   │  
18 │ ╭     pub fn read_num(self) -> u256 {
19 │ │         return self.num
20 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> u256

note: 
   ┌─ sized_vals_in_sto.fe:19:16
   │
19 │         return self.num
   │                ^^^^ Foo: Value

note: 
   ┌─ sized_vals_in_sto.fe:19:16
   │
19 │         return self.num
   │                ^^^^^^^^ u256: Storage { nonce: Some(0) } => Value

note: 
   ┌─ sized_vals_in_sto.fe:22:5
   │  
22 │ ╭     pub fn write_nums(self, x: Array<u256, 42>) {
23 │ │         self.nums = x
24 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: x, typ: Array<u256, 42> }] -> ()

note: 
   ┌─ sized_vals_in_sto.fe:23:9
   │
23 │         self.nums = x
   │         ^^^^ Foo: Value

note: 
   ┌─ sized_vals_in_sto.fe:23:9
   │
23 │         self.nums = x
   │         ^^^^^^^^^   ^ Array<u256, 42>: Memory
   │         │            
   │         Array<u256, 42>: Storage { nonce: Some(1) }

note: 
   ┌─ sized_vals_in_sto.fe:26:5
   │  
26 │ ╭     pub fn read_nums(self) -> Array<u256, 42> {
27 │ │         return self.nums.to_mem()
28 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> Array<u256, 42>

note: 
   ┌─ sized_vals_in_sto.fe:27:16
   │
27 │         return self.nums.to_mem()
   │                ^^^^ Foo: Value

note: 
   ┌─ sized_vals_in_sto.fe:27:16
   │
27 │         return self.nums.to_mem()
   │                ^^^^^^^^^ Array<u256, 42>: Storage { nonce: Some(1) }

note: 
   ┌─ sized_vals_in_sto.fe:27:16
   │
27 │         return self.nums.to_mem()
   │                ^^^^^^^^^^^^^^^^^^ Array<u256, 42>: Storage { nonce: Some(1) } => Memory

note: 
   ┌─ sized_vals_in_sto.fe:30:5
   │  
30 │ ╭     pub fn write_str(self, x: String<26>) {
31 │ │         self.str = x
32 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: x, typ: String<26> }] -> ()

note: 
   ┌─ sized_vals_in_sto.fe:31:9
   │
31 │         self.str = x
   │         ^^^^ Foo: Value

note: 
   ┌─ sized_vals_in_sto.fe:31:9
   │
31 │         self.str = x
   │         ^^^^^^^^   ^ String<26>: Memory
   │         │           
   │         String<26>: Storage { nonce: Some(2) }

note: 
   ┌─ sized_vals_in_sto.fe:34:5
   │  
34 │ ╭     pub fn read_str(self) -> String<26> {
35 │ │         return self.str.to_mem()
36 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> String<26>

note: 
   ┌─ sized_vals_in_sto.fe:35:16
   │
35 │         return self.str.to_mem()
   │                ^^^^ Foo: Value

note: 
   ┌─ sized_vals_in_sto.fe:35:16
   │
35 │         return self.str.to_mem()
   │                ^^^^^^^^ String<26>: Storage { nonce: Some(2) }

note: 
   ┌─ sized_vals_in_sto.fe:35:16
   │
35 │         return self.str.to_mem()
   │                ^^^^^^^^^^^^^^^^^ String<26>: Storage { nonce: Some(2) } => Memory

note: 
   ┌─ sized_vals_in_sto.fe:38:5
   │  
38 │ ╭     pub fn emit_event(self, ctx: Context) {
39 │ │         emit MyEvent(ctx, num: self.num, nums: self.nums.to_mem(), str: self.str.to_mem())
40 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: ctx, typ: Context }] -> ()

note: 
   ┌─ sized_vals_in_sto.fe:39:22
   │
39 │         emit MyEvent(ctx, num: self.num, nums: self.nums.to_mem(), str: self.str.to_mem())
   │                      ^^^       ^^^^ Foo: Value
   │                      │          
   │                      Context: Memory

note: 
   ┌─ sized_vals_in_sto.fe:39:32
   │
39 │         emit MyEvent(ctx, num: self.num, nums: self.nums.to_mem(), str: self.str.to_mem())
   │                                ^^^^^^^^        ^^^^ Foo: Value
   │                                │                
   │                                u256: Storage { nonce: Some(0) } => Value

note: 
   ┌─ sized_vals_in_sto.fe:39:48
   │
39 │         emit MyEvent(ctx, num: self.num, nums: self.nums.to_mem(), str: self.str.to_mem())
   │                                                ^^^^^^^^^ Array<u256, 42>: Storage { nonce: Some(1) }

note: 
   ┌─ sized_vals_in_sto.fe:39:48
   │
39 │         emit MyEvent(ctx, num: self.num, nums: self.nums.to_mem(), str: self.str.to_mem())
   │                                                ^^^^^^^^^^^^^^^^^^       ^^^^ Foo: Value
   │                                                │                         
   │                                                Array<u256, 42>: Storage { nonce: Some(1) } => Memory

note: 
   ┌─ sized_vals_in_sto.fe:39:73
   │
39 │         emit MyEvent(ctx, num: self.num, nums: self.nums.to_mem(), str: self.str.to_mem())
   │                                                                         ^^^^^^^^ String<26>: Storage { nonce: Some(2) }

note: 
   ┌─ sized_vals_in_sto.fe:39:73
   │
39 │         emit MyEvent(ctx, num: self.num, nums: self.nums.to_mem(), str: self.str.to_mem())
   │                                                                         ^^^^^^^^^^^^^^^^^ String<26>: Storage { nonce: Some(2) } => Memory


