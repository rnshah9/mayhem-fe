---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ numeric_sizes.fe:1:1
  │
1 │ const I8_MIN: i8 = -128
  │ ^^^^^^^^^^^^^^^^^^^^^^^ i8

note: 
  ┌─ numeric_sizes.fe:2:1
  │
2 │ const I8_MAX: i8 = 127
  │ ^^^^^^^^^^^^^^^^^^^^^^ i8

note: 
  ┌─ numeric_sizes.fe:3:1
  │
3 │ const U8_MIN: u8 = 0
  │ ^^^^^^^^^^^^^^^^^^^^ u8

note: 
  ┌─ numeric_sizes.fe:4:1
  │
4 │ const U8_MAX: u8 = 255
  │ ^^^^^^^^^^^^^^^^^^^^^^ u8

note: 
  ┌─ numeric_sizes.fe:6:1
  │
6 │ const I16_MIN: i16 = -32768
  │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^ i16

note: 
  ┌─ numeric_sizes.fe:7:1
  │
7 │ const I16_MAX: i16 = 32767
  │ ^^^^^^^^^^^^^^^^^^^^^^^^^^ i16

note: 
  ┌─ numeric_sizes.fe:8:1
  │
8 │ const U16_MIN: u16 = 0
  │ ^^^^^^^^^^^^^^^^^^^^^^ u16

note: 
  ┌─ numeric_sizes.fe:9:1
  │
9 │ const U16_MAX: u16 = 65535
  │ ^^^^^^^^^^^^^^^^^^^^^^^^^^ u16

note: 
   ┌─ numeric_sizes.fe:11:1
   │
11 │ const I32_MIN: i32 = -2147483648
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i32

note: 
   ┌─ numeric_sizes.fe:12:1
   │
12 │ const I32_MAX: i32 = 2147483647
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i32

note: 
   ┌─ numeric_sizes.fe:13:1
   │
13 │ const U32_MIN: u32 = 0
   │ ^^^^^^^^^^^^^^^^^^^^^^ u32

note: 
   ┌─ numeric_sizes.fe:14:1
   │
14 │ const U32_MAX: u32 = 4294967295
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u32

note: 
   ┌─ numeric_sizes.fe:16:1
   │
16 │ const I64_MIN: i64 = -9223372036854775808
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i64

note: 
   ┌─ numeric_sizes.fe:17:1
   │
17 │ const I64_MAX: i64 = 9223372036854775807
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i64

note: 
   ┌─ numeric_sizes.fe:18:1
   │
18 │ const U64_MIN: u64 = 0
   │ ^^^^^^^^^^^^^^^^^^^^^^ u64

note: 
   ┌─ numeric_sizes.fe:19:1
   │
19 │ const U64_MAX: u64 = 18446744073709551615
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u64

note: 
   ┌─ numeric_sizes.fe:21:1
   │
21 │ const I128_MIN: i128 = -170141183460469231731687303715884105728
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i128

note: 
   ┌─ numeric_sizes.fe:22:1
   │
22 │ const I128_MAX: i128 = 170141183460469231731687303715884105727
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i128

note: 
   ┌─ numeric_sizes.fe:23:1
   │
23 │ const U128_MIN: u128 = 0
   │ ^^^^^^^^^^^^^^^^^^^^^^^^ u128

note: 
   ┌─ numeric_sizes.fe:24:1
   │
24 │ const U128_MAX: u128 = 340282366920938463463374607431768211455
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u128

note: 
   ┌─ numeric_sizes.fe:26:1
   │
26 │ const I256_MIN: i256 = -57896044618658097711785492504343953926634992332820282019728792003956564819968
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i256

note: 
   ┌─ numeric_sizes.fe:27:1
   │
27 │ const I256_MAX: i256 = 57896044618658097711785492504343953926634992332820282019728792003956564819967
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i256

note: 
   ┌─ numeric_sizes.fe:28:1
   │
28 │ const U256_MIN: u256 = 0
   │ ^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ numeric_sizes.fe:29:1
   │
29 │ const U256_MAX: u256 = 115792089237316195423570985008687907853269984665640564039457584007913129639935
   │ ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256

note: 
   ┌─ numeric_sizes.fe:33:5
   │  
33 │ ╭     pub fn get_u8_min() -> u8 {
34 │ │         return u8(0)
35 │ │     }
   │ ╰─────^ self: None, params: [] -> u8

note: 
   ┌─ numeric_sizes.fe:34:19
   │
34 │         return u8(0)
   │                   ^ u8: Value

note: 
   ┌─ numeric_sizes.fe:34:16
   │
34 │         return u8(0)
   │                ^^^^^ u8: Value

note: 
   ┌─ numeric_sizes.fe:36:5
   │  
36 │ ╭     pub fn get_u8_const_min() -> u8 {
37 │ │         return U8_MIN
38 │ │     }
   │ ╰─────^ self: None, params: [] -> u8

note: 
   ┌─ numeric_sizes.fe:37:16
   │
37 │         return U8_MIN
   │                ^^^^^^ u8: Value

note: 
   ┌─ numeric_sizes.fe:40:5
   │  
40 │ ╭     pub fn get_u16_min() -> u16 {
41 │ │         return u16(0)
42 │ │     }
   │ ╰─────^ self: None, params: [] -> u16

note: 
   ┌─ numeric_sizes.fe:41:20
   │
41 │         return u16(0)
   │                    ^ u16: Value

note: 
   ┌─ numeric_sizes.fe:41:16
   │
41 │         return u16(0)
   │                ^^^^^^ u16: Value

note: 
   ┌─ numeric_sizes.fe:44:5
   │  
44 │ ╭     pub fn get_u16_const_min() -> u16 {
45 │ │         return U16_MIN
46 │ │     }
   │ ╰─────^ self: None, params: [] -> u16

note: 
   ┌─ numeric_sizes.fe:45:16
   │
45 │         return U16_MIN
   │                ^^^^^^^ u16: Value

note: 
   ┌─ numeric_sizes.fe:48:5
   │  
48 │ ╭     pub fn get_u32_min() -> u32 {
49 │ │         return u32(0)
50 │ │     }
   │ ╰─────^ self: None, params: [] -> u32

note: 
   ┌─ numeric_sizes.fe:49:20
   │
49 │         return u32(0)
   │                    ^ u32: Value

note: 
   ┌─ numeric_sizes.fe:49:16
   │
49 │         return u32(0)
   │                ^^^^^^ u32: Value

note: 
   ┌─ numeric_sizes.fe:52:5
   │  
52 │ ╭     pub fn get_u32_const_min() -> u32 {
53 │ │         return U32_MIN
54 │ │     }
   │ ╰─────^ self: None, params: [] -> u32

note: 
   ┌─ numeric_sizes.fe:53:16
   │
53 │         return U32_MIN
   │                ^^^^^^^ u32: Value

note: 
   ┌─ numeric_sizes.fe:56:5
   │  
56 │ ╭     pub fn get_u64_min() -> u64 {
57 │ │         return u64(0)
58 │ │     }
   │ ╰─────^ self: None, params: [] -> u64

note: 
   ┌─ numeric_sizes.fe:57:20
   │
57 │         return u64(0)
   │                    ^ u64: Value

note: 
   ┌─ numeric_sizes.fe:57:16
   │
57 │         return u64(0)
   │                ^^^^^^ u64: Value

note: 
   ┌─ numeric_sizes.fe:60:5
   │  
60 │ ╭     pub fn get_u64_const_min() -> u64 {
61 │ │         return U64_MIN
62 │ │     }
   │ ╰─────^ self: None, params: [] -> u64

note: 
   ┌─ numeric_sizes.fe:61:16
   │
61 │         return U64_MIN
   │                ^^^^^^^ u64: Value

note: 
   ┌─ numeric_sizes.fe:64:5
   │  
64 │ ╭     pub fn get_u128_min() -> u128 {
65 │ │         return u128(0)
66 │ │     }
   │ ╰─────^ self: None, params: [] -> u128

note: 
   ┌─ numeric_sizes.fe:65:21
   │
65 │         return u128(0)
   │                     ^ u128: Value

note: 
   ┌─ numeric_sizes.fe:65:16
   │
65 │         return u128(0)
   │                ^^^^^^^ u128: Value

note: 
   ┌─ numeric_sizes.fe:68:5
   │  
68 │ ╭     pub fn get_u128_const_min() -> u128 {
69 │ │         return U128_MIN
70 │ │     }
   │ ╰─────^ self: None, params: [] -> u128

note: 
   ┌─ numeric_sizes.fe:69:16
   │
69 │         return U128_MIN
   │                ^^^^^^^^ u128: Value

note: 
   ┌─ numeric_sizes.fe:72:5
   │  
72 │ ╭     pub fn get_u256_min() -> u256 {
73 │ │         return u256(0)
74 │ │     }
   │ ╰─────^ self: None, params: [] -> u256

note: 
   ┌─ numeric_sizes.fe:73:21
   │
73 │         return u256(0)
   │                     ^ u256: Value

note: 
   ┌─ numeric_sizes.fe:73:16
   │
73 │         return u256(0)
   │                ^^^^^^^ u256: Value

note: 
   ┌─ numeric_sizes.fe:76:5
   │  
76 │ ╭     pub fn get_u256_const_min() -> u256 {
77 │ │         return U256_MIN
78 │ │     }
   │ ╰─────^ self: None, params: [] -> u256

note: 
   ┌─ numeric_sizes.fe:77:16
   │
77 │         return U256_MIN
   │                ^^^^^^^^ u256: Value

note: 
   ┌─ numeric_sizes.fe:80:5
   │  
80 │ ╭     pub fn get_i8_min() -> i8 {
81 │ │         return i8(-128)
82 │ │     }
   │ ╰─────^ self: None, params: [] -> i8

note: 
   ┌─ numeric_sizes.fe:81:20
   │
81 │         return i8(-128)
   │                    ^^^ u256: Value

note: 
   ┌─ numeric_sizes.fe:81:19
   │
81 │         return i8(-128)
   │                   ^^^^ i8: Value

note: 
   ┌─ numeric_sizes.fe:81:16
   │
81 │         return i8(-128)
   │                ^^^^^^^^ i8: Value

note: 
   ┌─ numeric_sizes.fe:84:5
   │  
84 │ ╭     pub fn get_i8_const_min() -> i8 {
85 │ │         return I8_MIN
86 │ │     }
   │ ╰─────^ self: None, params: [] -> i8

note: 
   ┌─ numeric_sizes.fe:85:16
   │
85 │         return I8_MIN
   │                ^^^^^^ i8: Value

note: 
   ┌─ numeric_sizes.fe:88:5
   │  
88 │ ╭     pub fn get_i16_min() -> i16 {
89 │ │         return i16(-32768)
90 │ │     }
   │ ╰─────^ self: None, params: [] -> i16

note: 
   ┌─ numeric_sizes.fe:89:21
   │
89 │         return i16(-32768)
   │                     ^^^^^ u256: Value

note: 
   ┌─ numeric_sizes.fe:89:20
   │
89 │         return i16(-32768)
   │                    ^^^^^^ i16: Value

note: 
   ┌─ numeric_sizes.fe:89:16
   │
89 │         return i16(-32768)
   │                ^^^^^^^^^^^ i16: Value

note: 
   ┌─ numeric_sizes.fe:92:5
   │  
92 │ ╭     pub fn get_i16_const_min() -> i16 {
93 │ │         return I16_MIN
94 │ │     }
   │ ╰─────^ self: None, params: [] -> i16

note: 
   ┌─ numeric_sizes.fe:93:16
   │
93 │         return I16_MIN
   │                ^^^^^^^ i16: Value

note: 
   ┌─ numeric_sizes.fe:96:5
   │  
96 │ ╭     pub fn get_i32_min() -> i32 {
97 │ │         return i32(-2147483648)
98 │ │     }
   │ ╰─────^ self: None, params: [] -> i32

note: 
   ┌─ numeric_sizes.fe:97:21
   │
97 │         return i32(-2147483648)
   │                     ^^^^^^^^^^ u256: Value

note: 
   ┌─ numeric_sizes.fe:97:20
   │
97 │         return i32(-2147483648)
   │                    ^^^^^^^^^^^ i32: Value

note: 
   ┌─ numeric_sizes.fe:97:16
   │
97 │         return i32(-2147483648)
   │                ^^^^^^^^^^^^^^^^ i32: Value

note: 
    ┌─ numeric_sizes.fe:100:5
    │  
100 │ ╭     pub fn get_i32_const_min() -> i32 {
101 │ │         return I32_MIN
102 │ │     }
    │ ╰─────^ self: None, params: [] -> i32

note: 
    ┌─ numeric_sizes.fe:101:16
    │
101 │         return I32_MIN
    │                ^^^^^^^ i32: Value

note: 
    ┌─ numeric_sizes.fe:104:5
    │  
104 │ ╭     pub fn get_i64_min() -> i64 {
105 │ │         return i64(-9223372036854775808)
106 │ │     }
    │ ╰─────^ self: None, params: [] -> i64

note: 
    ┌─ numeric_sizes.fe:105:21
    │
105 │         return i64(-9223372036854775808)
    │                     ^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ numeric_sizes.fe:105:20
    │
105 │         return i64(-9223372036854775808)
    │                    ^^^^^^^^^^^^^^^^^^^^ i64: Value

note: 
    ┌─ numeric_sizes.fe:105:16
    │
105 │         return i64(-9223372036854775808)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^ i64: Value

note: 
    ┌─ numeric_sizes.fe:108:5
    │  
108 │ ╭     pub fn get_i64_const_min() -> i64 {
109 │ │         return I64_MIN
110 │ │     }
    │ ╰─────^ self: None, params: [] -> i64

note: 
    ┌─ numeric_sizes.fe:109:16
    │
109 │         return I64_MIN
    │                ^^^^^^^ i64: Value

note: 
    ┌─ numeric_sizes.fe:112:5
    │  
112 │ ╭     pub fn get_i128_min() -> i128 {
113 │ │         return i128(-170141183460469231731687303715884105728)
114 │ │     }
    │ ╰─────^ self: None, params: [] -> i128

note: 
    ┌─ numeric_sizes.fe:113:22
    │
113 │         return i128(-170141183460469231731687303715884105728)
    │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ numeric_sizes.fe:113:21
    │
113 │         return i128(-170141183460469231731687303715884105728)
    │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i128: Value

note: 
    ┌─ numeric_sizes.fe:113:16
    │
113 │         return i128(-170141183460469231731687303715884105728)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i128: Value

note: 
    ┌─ numeric_sizes.fe:116:5
    │  
116 │ ╭     pub fn get_i128_const_min() -> i128 {
117 │ │         return I128_MIN
118 │ │     }
    │ ╰─────^ self: None, params: [] -> i128

note: 
    ┌─ numeric_sizes.fe:117:16
    │
117 │         return I128_MIN
    │                ^^^^^^^^ i128: Value

note: 
    ┌─ numeric_sizes.fe:120:5
    │  
120 │ ╭     pub fn get_i256_min() -> i256 {
121 │ │         return i256(-57896044618658097711785492504343953926634992332820282019728792003956564819968)
122 │ │     }
    │ ╰─────^ self: None, params: [] -> i256

note: 
    ┌─ numeric_sizes.fe:121:22
    │
121 │         return i256(-57896044618658097711785492504343953926634992332820282019728792003956564819968)
    │                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ numeric_sizes.fe:121:21
    │
121 │         return i256(-57896044618658097711785492504343953926634992332820282019728792003956564819968)
    │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i256: Value

note: 
    ┌─ numeric_sizes.fe:121:16
    │
121 │         return i256(-57896044618658097711785492504343953926634992332820282019728792003956564819968)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i256: Value

note: 
    ┌─ numeric_sizes.fe:124:5
    │  
124 │ ╭     pub fn get_i256_const_min() -> i256 {
125 │ │         return I256_MIN
126 │ │     }
    │ ╰─────^ self: None, params: [] -> i256

note: 
    ┌─ numeric_sizes.fe:125:16
    │
125 │         return I256_MIN
    │                ^^^^^^^^ i256: Value

note: 
    ┌─ numeric_sizes.fe:128:5
    │  
128 │ ╭     pub fn get_u8_max() -> u8 {
129 │ │         return u8(255)
130 │ │     }
    │ ╰─────^ self: None, params: [] -> u8

note: 
    ┌─ numeric_sizes.fe:129:19
    │
129 │         return u8(255)
    │                   ^^^ u8: Value

note: 
    ┌─ numeric_sizes.fe:129:16
    │
129 │         return u8(255)
    │                ^^^^^^^ u8: Value

note: 
    ┌─ numeric_sizes.fe:132:5
    │  
132 │ ╭     pub fn get_u8_const_max() -> u8 {
133 │ │         return U8_MAX
134 │ │     }
    │ ╰─────^ self: None, params: [] -> u8

note: 
    ┌─ numeric_sizes.fe:133:16
    │
133 │         return U8_MAX
    │                ^^^^^^ u8: Value

note: 
    ┌─ numeric_sizes.fe:136:5
    │  
136 │ ╭     pub fn get_u16_max() -> u16 {
137 │ │         return u16(65535)
138 │ │     }
    │ ╰─────^ self: None, params: [] -> u16

note: 
    ┌─ numeric_sizes.fe:137:20
    │
137 │         return u16(65535)
    │                    ^^^^^ u16: Value

note: 
    ┌─ numeric_sizes.fe:137:16
    │
137 │         return u16(65535)
    │                ^^^^^^^^^^ u16: Value

note: 
    ┌─ numeric_sizes.fe:140:5
    │  
140 │ ╭     pub fn get_u16_const_max() -> u16 {
141 │ │         return U16_MAX
142 │ │     }
    │ ╰─────^ self: None, params: [] -> u16

note: 
    ┌─ numeric_sizes.fe:141:16
    │
141 │         return U16_MAX
    │                ^^^^^^^ u16: Value

note: 
    ┌─ numeric_sizes.fe:144:5
    │  
144 │ ╭     pub fn get_u32_max() -> u32 {
145 │ │         return u32(4294967295)
146 │ │     }
    │ ╰─────^ self: None, params: [] -> u32

note: 
    ┌─ numeric_sizes.fe:145:20
    │
145 │         return u32(4294967295)
    │                    ^^^^^^^^^^ u32: Value

note: 
    ┌─ numeric_sizes.fe:145:16
    │
145 │         return u32(4294967295)
    │                ^^^^^^^^^^^^^^^ u32: Value

note: 
    ┌─ numeric_sizes.fe:148:5
    │  
148 │ ╭     pub fn get_u32_const_max() -> u32 {
149 │ │         return U32_MAX
150 │ │     }
    │ ╰─────^ self: None, params: [] -> u32

note: 
    ┌─ numeric_sizes.fe:149:16
    │
149 │         return U32_MAX
    │                ^^^^^^^ u32: Value

note: 
    ┌─ numeric_sizes.fe:152:5
    │  
152 │ ╭     pub fn get_u64_max() -> u64 {
153 │ │         return u64(18446744073709551615)
154 │ │     }
    │ ╰─────^ self: None, params: [] -> u64

note: 
    ┌─ numeric_sizes.fe:153:20
    │
153 │         return u64(18446744073709551615)
    │                    ^^^^^^^^^^^^^^^^^^^^ u64: Value

note: 
    ┌─ numeric_sizes.fe:153:16
    │
153 │         return u64(18446744073709551615)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^ u64: Value

note: 
    ┌─ numeric_sizes.fe:156:5
    │  
156 │ ╭     pub fn get_u64_const_max() -> u64 {
157 │ │         return U64_MAX
158 │ │     }
    │ ╰─────^ self: None, params: [] -> u64

note: 
    ┌─ numeric_sizes.fe:157:16
    │
157 │         return U64_MAX
    │                ^^^^^^^ u64: Value

note: 
    ┌─ numeric_sizes.fe:160:5
    │  
160 │ ╭     pub fn get_u128_max() -> u128 {
161 │ │         return u128(340282366920938463463374607431768211455)
162 │ │     }
    │ ╰─────^ self: None, params: [] -> u128

note: 
    ┌─ numeric_sizes.fe:161:21
    │
161 │         return u128(340282366920938463463374607431768211455)
    │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u128: Value

note: 
    ┌─ numeric_sizes.fe:161:16
    │
161 │         return u128(340282366920938463463374607431768211455)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u128: Value

note: 
    ┌─ numeric_sizes.fe:164:5
    │  
164 │ ╭     pub fn get_u128_const_max() -> u128 {
165 │ │         return U128_MAX
166 │ │     }
    │ ╰─────^ self: None, params: [] -> u128

note: 
    ┌─ numeric_sizes.fe:165:16
    │
165 │         return U128_MAX
    │                ^^^^^^^^ u128: Value

note: 
    ┌─ numeric_sizes.fe:168:5
    │  
168 │ ╭     pub fn get_u256_max() -> u256 {
169 │ │         return u256(115792089237316195423570985008687907853269984665640564039457584007913129639935)
170 │ │     }
    │ ╰─────^ self: None, params: [] -> u256

note: 
    ┌─ numeric_sizes.fe:169:21
    │
169 │         return u256(115792089237316195423570985008687907853269984665640564039457584007913129639935)
    │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ numeric_sizes.fe:169:16
    │
169 │         return u256(115792089237316195423570985008687907853269984665640564039457584007913129639935)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ u256: Value

note: 
    ┌─ numeric_sizes.fe:172:5
    │  
172 │ ╭     pub fn get_u256_const_max() -> u256 {
173 │ │         return U256_MAX
174 │ │     }
    │ ╰─────^ self: None, params: [] -> u256

note: 
    ┌─ numeric_sizes.fe:173:16
    │
173 │         return U256_MAX
    │                ^^^^^^^^ u256: Value

note: 
    ┌─ numeric_sizes.fe:176:5
    │  
176 │ ╭     pub fn get_i8_max() -> i8 {
177 │ │         return i8(127)
178 │ │     }
    │ ╰─────^ self: None, params: [] -> i8

note: 
    ┌─ numeric_sizes.fe:177:19
    │
177 │         return i8(127)
    │                   ^^^ i8: Value

note: 
    ┌─ numeric_sizes.fe:177:16
    │
177 │         return i8(127)
    │                ^^^^^^^ i8: Value

note: 
    ┌─ numeric_sizes.fe:180:5
    │  
180 │ ╭     pub fn get_i8_const_max() -> i8 {
181 │ │         return I8_MAX
182 │ │     }
    │ ╰─────^ self: None, params: [] -> i8

note: 
    ┌─ numeric_sizes.fe:181:16
    │
181 │         return I8_MAX
    │                ^^^^^^ i8: Value

note: 
    ┌─ numeric_sizes.fe:184:5
    │  
184 │ ╭     pub fn get_i16_max() -> i16 {
185 │ │         return i16(32767)
186 │ │     }
    │ ╰─────^ self: None, params: [] -> i16

note: 
    ┌─ numeric_sizes.fe:185:20
    │
185 │         return i16(32767)
    │                    ^^^^^ i16: Value

note: 
    ┌─ numeric_sizes.fe:185:16
    │
185 │         return i16(32767)
    │                ^^^^^^^^^^ i16: Value

note: 
    ┌─ numeric_sizes.fe:188:5
    │  
188 │ ╭     pub fn get_i16_const_max() -> i16 {
189 │ │         return I16_MAX
190 │ │     }
    │ ╰─────^ self: None, params: [] -> i16

note: 
    ┌─ numeric_sizes.fe:189:16
    │
189 │         return I16_MAX
    │                ^^^^^^^ i16: Value

note: 
    ┌─ numeric_sizes.fe:192:5
    │  
192 │ ╭     pub fn get_i32_max() -> i32 {
193 │ │         return i32(2147483647)
194 │ │     }
    │ ╰─────^ self: None, params: [] -> i32

note: 
    ┌─ numeric_sizes.fe:193:20
    │
193 │         return i32(2147483647)
    │                    ^^^^^^^^^^ i32: Value

note: 
    ┌─ numeric_sizes.fe:193:16
    │
193 │         return i32(2147483647)
    │                ^^^^^^^^^^^^^^^ i32: Value

note: 
    ┌─ numeric_sizes.fe:196:5
    │  
196 │ ╭     pub fn get_i32_const_max() -> i32 {
197 │ │         return I32_MAX
198 │ │     }
    │ ╰─────^ self: None, params: [] -> i32

note: 
    ┌─ numeric_sizes.fe:197:16
    │
197 │         return I32_MAX
    │                ^^^^^^^ i32: Value

note: 
    ┌─ numeric_sizes.fe:200:5
    │  
200 │ ╭     pub fn get_i64_max() -> i64 {
201 │ │         return i64(9223372036854775807)
202 │ │     }
    │ ╰─────^ self: None, params: [] -> i64

note: 
    ┌─ numeric_sizes.fe:201:20
    │
201 │         return i64(9223372036854775807)
    │                    ^^^^^^^^^^^^^^^^^^^ i64: Value

note: 
    ┌─ numeric_sizes.fe:201:16
    │
201 │         return i64(9223372036854775807)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^ i64: Value

note: 
    ┌─ numeric_sizes.fe:204:5
    │  
204 │ ╭     pub fn get_i64_const_max() -> i64 {
205 │ │         return I64_MAX
206 │ │     }
    │ ╰─────^ self: None, params: [] -> i64

note: 
    ┌─ numeric_sizes.fe:205:16
    │
205 │         return I64_MAX
    │                ^^^^^^^ i64: Value

note: 
    ┌─ numeric_sizes.fe:208:5
    │  
208 │ ╭     pub fn get_i128_max() -> i128 {
209 │ │         return i128(170141183460469231731687303715884105727)
210 │ │     }
    │ ╰─────^ self: None, params: [] -> i128

note: 
    ┌─ numeric_sizes.fe:209:21
    │
209 │         return i128(170141183460469231731687303715884105727)
    │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i128: Value

note: 
    ┌─ numeric_sizes.fe:209:16
    │
209 │         return i128(170141183460469231731687303715884105727)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i128: Value

note: 
    ┌─ numeric_sizes.fe:212:5
    │  
212 │ ╭     pub fn get_i128_const_max() -> i128 {
213 │ │         return I128_MAX
214 │ │     }
    │ ╰─────^ self: None, params: [] -> i128

note: 
    ┌─ numeric_sizes.fe:213:16
    │
213 │         return I128_MAX
    │                ^^^^^^^^ i128: Value

note: 
    ┌─ numeric_sizes.fe:216:5
    │  
216 │ ╭     pub fn get_i256_max() -> i256 {
217 │ │         return i256(57896044618658097711785492504343953926634992332820282019728792003956564819967)
218 │ │     }
    │ ╰─────^ self: None, params: [] -> i256

note: 
    ┌─ numeric_sizes.fe:217:21
    │
217 │         return i256(57896044618658097711785492504343953926634992332820282019728792003956564819967)
    │                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i256: Value

note: 
    ┌─ numeric_sizes.fe:217:16
    │
217 │         return i256(57896044618658097711785492504343953926634992332820282019728792003956564819967)
    │                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ i256: Value

note: 
    ┌─ numeric_sizes.fe:220:5
    │  
220 │ ╭     pub fn get_i256_const_max() -> i256 {
221 │ │         return I256_MAX
222 │ │     }
    │ ╰─────^ self: None, params: [] -> i256

note: 
    ┌─ numeric_sizes.fe:221:16
    │
221 │         return I256_MAX
    │                ^^^^^^^^ i256: Value


