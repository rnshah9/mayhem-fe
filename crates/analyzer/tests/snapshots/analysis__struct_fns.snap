---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ struct_fns.fe:2:5
  │
2 │     pub x: u64
  │     ^^^^^^^^^^ u64
3 │     pub y: u64
  │     ^^^^^^^^^^ u64

note: 
  ┌─ struct_fns.fe:5:5
  │  
5 │ ╭     pub fn new(x: u64, y: u64) -> Point {
6 │ │         return Point(x, y)
7 │ │     }
  │ ╰─────^ self: None, params: [{ label: None, name: x, typ: u64 }, { label: None, name: y, typ: u64 }] -> Point

note: 
  ┌─ struct_fns.fe:6:22
  │
6 │         return Point(x, y)
  │                      ^  ^ u64: Value
  │                      │   
  │                      u64: Value

note: 
  ┌─ struct_fns.fe:6:16
  │
6 │         return Point(x, y)
  │                ^^^^^^^^^^^ Point: Memory

note: 
   ┌─ struct_fns.fe:9:5
   │  
 9 │ ╭     pub fn origin() -> Point {
10 │ │         return Point(x: 0, y: 0)
11 │ │     }
   │ ╰─────^ self: None, params: [] -> Point

note: 
   ┌─ struct_fns.fe:10:25
   │
10 │         return Point(x: 0, y: 0)
   │                         ^     ^ u64: Value
   │                         │      
   │                         u64: Value

note: 
   ┌─ struct_fns.fe:10:16
   │
10 │         return Point(x: 0, y: 0)
   │                ^^^^^^^^^^^^^^^^^ Point: Memory

note: 
   ┌─ struct_fns.fe:13:5
   │  
13 │ ╭     pub fn x(self) -> u64 {
14 │ │         return self.x
15 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> u64

note: 
   ┌─ struct_fns.fe:14:16
   │
14 │         return self.x
   │                ^^^^ Point: Memory

note: 
   ┌─ struct_fns.fe:14:16
   │
14 │         return self.x
   │                ^^^^^^ u64: Memory => Value

note: 
   ┌─ struct_fns.fe:17:5
   │  
17 │ ╭     pub fn set_x(self, _ x: u64) -> u64 {
18 │ │         let old: u64 = self.x
19 │ │         self.x = x
20 │ │         return old
21 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: Some("_"), name: x, typ: u64 }] -> u64

note: 
   ┌─ struct_fns.fe:18:13
   │
18 │         let old: u64 = self.x
   │             ^^^ u64

note: 
   ┌─ struct_fns.fe:18:24
   │
18 │         let old: u64 = self.x
   │                        ^^^^ Point: Memory

note: 
   ┌─ struct_fns.fe:18:24
   │
18 │         let old: u64 = self.x
   │                        ^^^^^^ u64: Memory => Value
19 │         self.x = x
   │         ^^^^ Point: Memory

note: 
   ┌─ struct_fns.fe:19:9
   │
19 │         self.x = x
   │         ^^^^^^   ^ u64: Value
   │         │         
   │         u64: Memory
20 │         return old
   │                ^^^ u64: Value

note: 
   ┌─ struct_fns.fe:23:5
   │  
23 │ ╭     pub fn reflect(self) {
24 │ │         let x: u64 = self.x
25 │ │         let y: u64 = self.y
26 │ │         self.x = y
27 │ │         self.y = x
28 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [] -> ()

note: 
   ┌─ struct_fns.fe:24:13
   │
24 │         let x: u64 = self.x
   │             ^ u64
25 │         let y: u64 = self.y
   │             ^ u64

note: 
   ┌─ struct_fns.fe:24:22
   │
24 │         let x: u64 = self.x
   │                      ^^^^ Point: Memory

note: 
   ┌─ struct_fns.fe:24:22
   │
24 │         let x: u64 = self.x
   │                      ^^^^^^ u64: Memory => Value
25 │         let y: u64 = self.y
   │                      ^^^^ Point: Memory

note: 
   ┌─ struct_fns.fe:25:22
   │
25 │         let y: u64 = self.y
   │                      ^^^^^^ u64: Memory => Value
26 │         self.x = y
   │         ^^^^ Point: Memory

note: 
   ┌─ struct_fns.fe:26:9
   │
26 │         self.x = y
   │         ^^^^^^   ^ u64: Value
   │         │         
   │         u64: Memory
27 │         self.y = x
   │         ^^^^ Point: Memory

note: 
   ┌─ struct_fns.fe:27:9
   │
27 │         self.y = x
   │         ^^^^^^   ^ u64: Value
   │         │         
   │         u64: Memory

note: 
   ┌─ struct_fns.fe:30:5
   │  
30 │ ╭     pub fn translate(self, x: u64, y: u64) {
31 │ │         self.x += x
32 │ │         self.y += y
33 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: None, name: x, typ: u64 }, { label: None, name: y, typ: u64 }] -> ()

note: 
   ┌─ struct_fns.fe:31:9
   │
31 │         self.x += x
   │         ^^^^ Point: Memory

note: 
   ┌─ struct_fns.fe:31:9
   │
31 │         self.x += x
   │         ^^^^^^    ^ u64: Value
   │         │          
   │         u64: Memory
32 │         self.y += y
   │         ^^^^ Point: Memory

note: 
   ┌─ struct_fns.fe:32:9
   │
32 │         self.y += y
   │         ^^^^^^    ^ u64: Value
   │         │          
   │         u64: Memory

note: 
   ┌─ struct_fns.fe:35:5
   │  
35 │ ╭     pub fn add(self, _ other: Point) -> Point {
36 │ │         let x: u64 = self.x + other.x
37 │ │         let y: u64 = self.y + other.y
38 │ │         return Point(x, y)
39 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: Some("_"), name: other, typ: Point }] -> Point

note: 
   ┌─ struct_fns.fe:36:13
   │
36 │         let x: u64 = self.x + other.x
   │             ^ u64
37 │         let y: u64 = self.y + other.y
   │             ^ u64

note: 
   ┌─ struct_fns.fe:36:22
   │
36 │         let x: u64 = self.x + other.x
   │                      ^^^^ Point: Memory

note: 
   ┌─ struct_fns.fe:36:22
   │
36 │         let x: u64 = self.x + other.x
   │                      ^^^^^^   ^^^^^ Point: Memory
   │                      │         
   │                      u64: Memory => Value

note: 
   ┌─ struct_fns.fe:36:31
   │
36 │         let x: u64 = self.x + other.x
   │                               ^^^^^^^ u64: Memory => Value

note: 
   ┌─ struct_fns.fe:36:22
   │
36 │         let x: u64 = self.x + other.x
   │                      ^^^^^^^^^^^^^^^^ u64: Value
37 │         let y: u64 = self.y + other.y
   │                      ^^^^ Point: Memory

note: 
   ┌─ struct_fns.fe:37:22
   │
37 │         let y: u64 = self.y + other.y
   │                      ^^^^^^   ^^^^^ Point: Memory
   │                      │         
   │                      u64: Memory => Value

note: 
   ┌─ struct_fns.fe:37:31
   │
37 │         let y: u64 = self.y + other.y
   │                               ^^^^^^^ u64: Memory => Value

note: 
   ┌─ struct_fns.fe:37:22
   │
37 │         let y: u64 = self.y + other.y
   │                      ^^^^^^^^^^^^^^^^ u64: Value
38 │         return Point(x, y)
   │                      ^  ^ u64: Value
   │                      │   
   │                      u64: Value

note: 
   ┌─ struct_fns.fe:38:16
   │
38 │         return Point(x, y)
   │                ^^^^^^^^^^^ Point: Memory

note: 
   ┌─ struct_fns.fe:42:1
   │  
42 │ ╭ pub fn do_pointy_things() {
43 │ │     let p1: Point = Point::origin()
44 │ │     p1.translate(x: 5, y: 10)
45 │ │     let p2: Point = Point(x: 1, y: 2)
46 │ │     let p3: Point = p1.add(p2)
47 │ │     assert p3.x == 6 and p3.y == 12
48 │ │ }
   │ ╰─^ self: None, params: [] -> ()

note: 
   ┌─ struct_fns.fe:43:9
   │
43 │     let p1: Point = Point::origin()
   │         ^^ Point
44 │     p1.translate(x: 5, y: 10)
45 │     let p2: Point = Point(x: 1, y: 2)
   │         ^^ Point
46 │     let p3: Point = p1.add(p2)
   │         ^^ Point

note: 
   ┌─ struct_fns.fe:43:21
   │
43 │     let p1: Point = Point::origin()
   │                     ^^^^^^^^^^^^^^^ Point: Memory
44 │     p1.translate(x: 5, y: 10)
   │     ^^              ^     ^^ u64: Value
   │     │               │      
   │     │               u64: Value
   │     Point: Memory

note: 
   ┌─ struct_fns.fe:44:5
   │
44 │     p1.translate(x: 5, y: 10)
   │     ^^^^^^^^^^^^^^^^^^^^^^^^^ (): Value
45 │     let p2: Point = Point(x: 1, y: 2)
   │                              ^     ^ u64: Value
   │                              │      
   │                              u64: Value

note: 
   ┌─ struct_fns.fe:45:21
   │
45 │     let p2: Point = Point(x: 1, y: 2)
   │                     ^^^^^^^^^^^^^^^^^ Point: Memory
46 │     let p3: Point = p1.add(p2)
   │                     ^^     ^^ Point: Memory
   │                     │       
   │                     Point: Memory

note: 
   ┌─ struct_fns.fe:46:21
   │
46 │     let p3: Point = p1.add(p2)
   │                     ^^^^^^^^^^ Point: Memory
47 │     assert p3.x == 6 and p3.y == 12
   │            ^^ Point: Memory

note: 
   ┌─ struct_fns.fe:47:12
   │
47 │     assert p3.x == 6 and p3.y == 12
   │            ^^^^    ^ u64: Value
   │            │        
   │            u64: Memory => Value

note: 
   ┌─ struct_fns.fe:47:12
   │
47 │     assert p3.x == 6 and p3.y == 12
   │            ^^^^^^^^^     ^^ Point: Memory
   │            │              
   │            bool: Value

note: 
   ┌─ struct_fns.fe:47:26
   │
47 │     assert p3.x == 6 and p3.y == 12
   │                          ^^^^    ^^ u64: Value
   │                          │        
   │                          u64: Memory => Value

note: 
   ┌─ struct_fns.fe:47:26
   │
47 │     assert p3.x == 6 and p3.y == 12
   │                          ^^^^^^^^^^ bool: Value

note: 
   ┌─ struct_fns.fe:47:12
   │
47 │     assert p3.x == 6 and p3.y == 12
   │            ^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value

note: 
   ┌─ struct_fns.fe:51:5
   │  
51 │ ╭     pub fn bar(x: u64, y: u64) -> u64 {
52 │ │         do_pointy_things()
53 │ │         let p: Point = Point::new(x, y)
54 │ │         assert p.x == x and p.y == y
   · │
58 │ │         return p.y
59 │ │     }
   │ ╰─────^ self: None, params: [{ label: None, name: x, typ: u64 }, { label: None, name: y, typ: u64 }] -> u64

note: 
   ┌─ struct_fns.fe:53:13
   │
53 │         let p: Point = Point::new(x, y)
   │             ^ Point

note: 
   ┌─ struct_fns.fe:52:9
   │
52 │         do_pointy_things()
   │         ^^^^^^^^^^^^^^^^^^ (): Value
53 │         let p: Point = Point::new(x, y)
   │                                   ^  ^ u64: Value
   │                                   │   
   │                                   u64: Value

note: 
   ┌─ struct_fns.fe:53:24
   │
53 │         let p: Point = Point::new(x, y)
   │                        ^^^^^^^^^^^^^^^^ Point: Memory
54 │         assert p.x == x and p.y == y
   │                ^ Point: Memory

note: 
   ┌─ struct_fns.fe:54:16
   │
54 │         assert p.x == x and p.y == y
   │                ^^^    ^ u64: Value
   │                │       
   │                u64: Memory => Value

note: 
   ┌─ struct_fns.fe:54:16
   │
54 │         assert p.x == x and p.y == y
   │                ^^^^^^^^     ^ Point: Memory
   │                │             
   │                bool: Value

note: 
   ┌─ struct_fns.fe:54:29
   │
54 │         assert p.x == x and p.y == y
   │                             ^^^    ^ u64: Value
   │                             │       
   │                             u64: Memory => Value

note: 
   ┌─ struct_fns.fe:54:29
   │
54 │         assert p.x == x and p.y == y
   │                             ^^^^^^^^ bool: Value

note: 
   ┌─ struct_fns.fe:54:16
   │
54 │         assert p.x == x and p.y == y
   │                ^^^^^^^^^^^^^^^^^^^^^ bool: Value
55 │         p.set_x(100)
   │         ^       ^^^ u64: Value
   │         │        
   │         Point: Memory

note: 
   ┌─ struct_fns.fe:55:9
   │
55 │         p.set_x(100)
   │         ^^^^^^^^^^^^ u64: Value
56 │         p.reflect()
   │         ^ Point: Memory

note: 
   ┌─ struct_fns.fe:56:9
   │
56 │         p.reflect()
   │         ^^^^^^^^^^^ (): Value
57 │         assert p.x() == y and p.y == 100
   │                ^ Point: Memory

note: 
   ┌─ struct_fns.fe:57:16
   │
57 │         assert p.x() == y and p.y == 100
   │                ^^^^^    ^ u64: Value
   │                │         
   │                u64: Value

note: 
   ┌─ struct_fns.fe:57:16
   │
57 │         assert p.x() == y and p.y == 100
   │                ^^^^^^^^^^     ^ Point: Memory
   │                │               
   │                bool: Value

note: 
   ┌─ struct_fns.fe:57:31
   │
57 │         assert p.x() == y and p.y == 100
   │                               ^^^    ^^^ u64: Value
   │                               │       
   │                               u64: Memory => Value

note: 
   ┌─ struct_fns.fe:57:31
   │
57 │         assert p.x() == y and p.y == 100
   │                               ^^^^^^^^^^ bool: Value

note: 
   ┌─ struct_fns.fe:57:16
   │
57 │         assert p.x() == y and p.y == 100
   │                ^^^^^^^^^^^^^^^^^^^^^^^^^ bool: Value
58 │         return p.y
   │                ^ Point: Memory

note: 
   ┌─ struct_fns.fe:58:16
   │
58 │         return p.y
   │                ^^^ u64: Memory => Value


