---
source: crates/analyzer/tests/analysis.rs
expression: "build_snapshot(&db, module)"

---
note: 
  ┌─ pure_fn_standalone.fe:1:1
  │  
1 │ ╭ fn add_bonus(_ x: u256) -> u256 {
2 │ │     return x + 10
3 │ │ }
  │ ╰─^ self: None, params: [{ label: Some("_"), name: x, typ: u256 }] -> u256

note: 
  ┌─ pure_fn_standalone.fe:2:12
  │
2 │     return x + 10
  │            ^   ^^ u256: Value
  │            │    
  │            u256: Value

note: 
  ┌─ pure_fn_standalone.fe:2:12
  │
2 │     return x + 10
  │            ^^^^^^ u256: Value

note: 
  ┌─ pure_fn_standalone.fe:6:5
  │
6 │     cool_users: Map<address, bool>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, bool>
7 │     points: Map<address, u256>
  │     ^^^^^^^^^^^^^^^^^^^^^^^^^^ Map<address, u256>

note: 
   ┌─ pure_fn_standalone.fe:9:5
   │  
 9 │ ╭     fn add_points(self, _ user: address, _ val: u256) {
10 │ │         if self.cool_users[user] {
11 │ │             self.points[user] += add_bonus(val)
12 │ │         } else {
13 │ │             self.points[user] += val
14 │ │         }
15 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: Some("_"), name: user, typ: address }, { label: Some("_"), name: val, typ: u256 }] -> ()

note: 
   ┌─ pure_fn_standalone.fe:10:12
   │
10 │         if self.cool_users[user] {
   │            ^^^^ Foo: Value

note: 
   ┌─ pure_fn_standalone.fe:10:12
   │
10 │         if self.cool_users[user] {
   │            ^^^^^^^^^^^^^^^ ^^^^ address: Value
   │            │                
   │            Map<address, bool>: Storage { nonce: Some(0) }

note: 
   ┌─ pure_fn_standalone.fe:10:12
   │
10 │         if self.cool_users[user] {
   │            ^^^^^^^^^^^^^^^^^^^^^ bool: Storage { nonce: None } => Value
11 │             self.points[user] += add_bonus(val)
   │             ^^^^ Foo: Value

note: 
   ┌─ pure_fn_standalone.fe:11:13
   │
11 │             self.points[user] += add_bonus(val)
   │             ^^^^^^^^^^^ ^^^^ address: Value
   │             │            
   │             Map<address, u256>: Storage { nonce: Some(1) }

note: 
   ┌─ pure_fn_standalone.fe:11:13
   │
11 │             self.points[user] += add_bonus(val)
   │             ^^^^^^^^^^^^^^^^^              ^^^ u256: Value
   │             │                               
   │             u256: Storage { nonce: None }

note: 
   ┌─ pure_fn_standalone.fe:11:34
   │
11 │             self.points[user] += add_bonus(val)
   │                                  ^^^^^^^^^^^^^^ u256: Value
12 │         } else {
13 │             self.points[user] += val
   │             ^^^^ Foo: Value

note: 
   ┌─ pure_fn_standalone.fe:13:13
   │
13 │             self.points[user] += val
   │             ^^^^^^^^^^^ ^^^^ address: Value
   │             │            
   │             Map<address, u256>: Storage { nonce: Some(1) }

note: 
   ┌─ pure_fn_standalone.fe:13:13
   │
13 │             self.points[user] += val
   │             ^^^^^^^^^^^^^^^^^    ^^^ u256: Value
   │             │                     
   │             u256: Storage { nonce: None }

note: 
   ┌─ pure_fn_standalone.fe:17:5
   │  
17 │ ╭     pub fn bar(self, _ x: u256) -> u256 {
18 │ │         let a: address = address(x)
19 │ │         self.add_points(a, 100)
20 │ │         self.cool_users[a] = true
21 │ │         self.add_points(a, 100)
22 │ │         return self.points[a]
23 │ │     }
   │ ╰─────^ self: Some(Mutable), params: [{ label: Some("_"), name: x, typ: u256 }] -> u256

note: 
   ┌─ pure_fn_standalone.fe:18:13
   │
18 │         let a: address = address(x)
   │             ^ address

note: 
   ┌─ pure_fn_standalone.fe:18:34
   │
18 │         let a: address = address(x)
   │                                  ^ u256: Value

note: 
   ┌─ pure_fn_standalone.fe:18:26
   │
18 │         let a: address = address(x)
   │                          ^^^^^^^^^^ address: Value
19 │         self.add_points(a, 100)
   │         ^^^^            ^  ^^^ u256: Value
   │         │               │   
   │         │               address: Value
   │         Foo: Value

note: 
   ┌─ pure_fn_standalone.fe:19:9
   │
19 │         self.add_points(a, 100)
   │         ^^^^^^^^^^^^^^^^^^^^^^^ (): Value
20 │         self.cool_users[a] = true
   │         ^^^^ Foo: Value

note: 
   ┌─ pure_fn_standalone.fe:20:9
   │
20 │         self.cool_users[a] = true
   │         ^^^^^^^^^^^^^^^ ^ address: Value
   │         │                
   │         Map<address, bool>: Storage { nonce: Some(0) }

note: 
   ┌─ pure_fn_standalone.fe:20:9
   │
20 │         self.cool_users[a] = true
   │         ^^^^^^^^^^^^^^^^^^   ^^^^ bool: Value
   │         │                     
   │         bool: Storage { nonce: None }
21 │         self.add_points(a, 100)
   │         ^^^^            ^  ^^^ u256: Value
   │         │               │   
   │         │               address: Value
   │         Foo: Value

note: 
   ┌─ pure_fn_standalone.fe:21:9
   │
21 │         self.add_points(a, 100)
   │         ^^^^^^^^^^^^^^^^^^^^^^^ (): Value
22 │         return self.points[a]
   │                ^^^^ Foo: Value

note: 
   ┌─ pure_fn_standalone.fe:22:16
   │
22 │         return self.points[a]
   │                ^^^^^^^^^^^ ^ address: Value
   │                │            
   │                Map<address, u256>: Storage { nonce: Some(1) }

note: 
   ┌─ pure_fn_standalone.fe:22:16
   │
22 │         return self.points[a]
   │                ^^^^^^^^^^^^^^ u256: Storage { nonce: None } => Value


